exp_df <- readerfunction(exp_url)
bl_df <- readerfunction(bl_url)
vs_df <- readerfunction(vs_url)
st_df <- readerfunction(st_url)
nb_df <- readerfunction(nb_url)
bo_df <- readerfunction(bo_url)
bl_tmp_dat <- truthfunction(bl_df, "blast")
library(tidyverse)
library(reshape2)
library(ggpubr)
readerfunction <- function(urlpath, classifier) {
tmp <- read_delim(file = urlpath, delim = "\t", col_names = FALSE) %>%
rename(., HashID = X1, Taxon = X2) %>%
separate(.,
col = Taxon,
into = c("kingdom", "phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";") %>%
select(-kingdom, -phylum)
tmp <- as.data.frame(apply(tmp, 2, function(y) (gsub(".__", "", y))))
tmp <- as.data.frame(apply(tmp, 2, function(y) (gsub("^$|^ $", NA, y))))
tmp <- as.data.frame(apply(tmp, 2, function(y) (gsub("Ambiguous taxa", NA, y))))
tmp <- as.data.frame(apply(tmp, 2, function(y) (gsub("^NA$", NA, y))))
tmp[] <- lapply(tmp, as.character)
tmp %>%
gather(key = level, value = Taxon, -HashID) %>%
mutate(Classifier=classifier)
}
bl_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/guano_comps/blast/guano_blast_taxonomy.txt"
vs_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/guano_comps/vsearch/guano_vsearch_taxonomy.txt"
#st_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/guano_comps/sintax/guano_sintax_taxonomy.txt"
st_url <- "~/Documents/nau_projects/guano/mole_ecol_methods_paper/guano_sintax_taxonomy.txt"
nb_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/guano_comps/nbayes/guano_nbayes_taxonomy.txt"
bo_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/guano_comps/bold/guano_bold_taxonomy.txt"
bl_df <- readerfunction(bl_url, "blast")
vs_df <- readerfunction(vs_url, "vsearch")
st_df <- readerfunction(st_url, "sintax")
nb_df <- readerfunction(nb_url, "nbayes")
bo_df <- readerfunction(bo_url, "bold")
## combine df's
all_df <- rbind(bl_df, vs_df, st_df, nb_df, bo_df)
rm(bl_df, vs_df, st_df, nb_df, bo_df)
rm(bl_url, nb_url, st_url, vs_url, bo_url, readerfunction)
## generate dataset for total taxa with information for first of two plots
plot1_dat <- all_df %>%
filter(!is.na(Taxon)) %>%
group_by(Classifier, level) %>%
summarise(nTaxa=n()) %>%
filter(level != 'Class')
plotdatfunction <- function(TaxaLevel) {
tmp_df <- all_df %>%
filter(level == TaxaLevel) %>%
spread(key = Classifier, value = Taxon)
match1_tmp <- tmp_df %>%
mutate(allMatch = case_when(blast == vsearch & blast == sintax & blast == nbayes & blast == bold ~ 'match')) %>%
select(HashID, allMatch)
drop_match1 <- match1_tmp %>% filter(allMatch == "match") %>% pull(HashID)
match2_tmp <- tmp_df %>%
filter(!HashID %in% drop_match1) %>%
mutate(Not_bo = case_when(blast == vsearch & blast == sintax & blast==nbayes & is.na(bold) ~ 'match',
blast == vsearch & blast == sintax & blast==nbayes & !is.na(bold) ~ 'diff')) %>%
mutate(Not_nb = case_when(blast == vsearch & blast == sintax & blast==bold & is.na(nbayes) ~ 'match',
blast == vsearch & blast == sintax & blast==bold & !is.na(nbayes) ~ 'diff')) %>%
mutate(Not_st = case_when(blast == vsearch & blast == nbayes & blast == bold & is.na(sintax) ~ 'match',
blast == vsearch & blast == nbayes & blast == bold & !is.na(sintax) ~ 'diff')) %>%
mutate(Not_vs = case_when(blast == sintax & blast == nbayes & blast == bold & is.na(vsearch) ~ 'match',
blast == sintax & blast == nbayes & blast == bold & !is.na(vsearch) ~ 'diff')) %>%
mutate(Not_bl = case_when(vsearch == sintax & vsearch == nbayes & vsearch == bold & is.na(blast) ~ 'match',
vsearch == sintax & vsearch == nbayes & vsearch == bold & !is.na(blast) ~ 'diff')) %>%
select(-blast, -vsearch, -sintax, -nbayes, -bold, -level)
drop_match2 <- match2_tmp %>% filter(!is.na(Not_bo) | !is.na(Not_nb) | !is.na(Not_st) | !is.na(Not_vs) | !is.na(Not_bl)) %>% pull(HashID)
drop_match3 <- c(drop_match1, drop_match2)
match3_tmp <- tmp_df %>%
filter(!HashID %in% drop_match3) %>%
mutate(bl_vs_st = case_when(blast == vsearch & blast == sintax & is.na(nbayes) &  is.na(bold) ~ 'match',
blast == vsearch & blast == sintax & !is.na(nbayes) & is.na(bold) ~ 'diff',
blast == vsearch & blast == sintax & is.na(nbayes) & !is.na(bold) ~ 'diff',
blast == vsearch & blast == sintax & !is.na(nbayes) & !is.na(bold) ~ 'diff')) %>%
mutate(bl_vs_nb = case_when(blast == vsearch & blast == nbayes & is.na(sintax) &  is.na(bold) ~ 'match',
blast == vsearch & blast == nbayes & !is.na(sintax) & is.na(bold) ~ 'diff',
blast == vsearch & blast == nbayes & is.na(sintax) & !is.na(bold) ~ 'diff',
blast == vsearch & blast == nbayes & !is.na(sintax) & !is.na(bold) ~ 'diff')) %>%
mutate(bl_vs_bo = case_when(blast == vsearch & blast == bold & is.na(nbayes) &  is.na(sintax) ~ 'match',
blast == vsearch & blast == bold & !is.na(nbayes) & is.na(sintax) ~ 'diff',
blast == vsearch & blast == bold & is.na(nbayes) & !is.na(sintax) ~ 'diff',
blast == vsearch & blast == bold & !is.na(nbayes) & !is.na(sintax) ~ 'diff')) %>%
mutate(bl_st_bo = case_when(blast == bold & blast == sintax & is.na(nbayes) &  is.na(vsearch) ~ 'match',
blast == bold & blast == sintax & !is.na(nbayes) & is.na(vsearch) ~ 'diff',
blast == bold & blast == sintax & is.na(nbayes) & !is.na(vsearch) ~ 'diff',
blast == bold & blast == sintax & !is.na(nbayes) & !is.na(vsearch) ~ 'diff')) %>%
mutate(bl_nb_st = case_when(blast == nbayes & blast == sintax & is.na(vsearch) &  is.na(bold) ~ 'match',
blast == nbayes & blast == sintax & !is.na(vsearch) & is.na(bold) ~ 'diff',
blast == nbayes & blast == sintax & is.na(vsearch) & !is.na(bold) ~ 'diff',
blast == nbayes & blast == sintax & !is.na(vsearch) & !is.na(bold) ~ 'diff')) %>%
mutate(bl_nb_bo = case_when(blast == nbayes & blast == bold & is.na(sintax) &  is.na(vsearch) ~ 'match',
blast == nbayes & blast == bold & !is.na(sintax) & is.na(vsearch) ~ 'diff',
blast == nbayes & blast == bold & is.na(sintax) & !is.na(vsearch) ~ 'diff',
blast == nbayes & blast == bold & !is.na(sintax) & !is.na(vsearch) ~ 'diff')) %>%
mutate(vs_st_nb = case_when(vsearch == nbayes & vsearch == sintax & is.na(blast) &  is.na(bold) ~ 'match',
vsearch == nbayes & vsearch == sintax & !is.na(blast) & is.na(bold) ~ 'diff',
vsearch == nbayes & vsearch == sintax & is.na(blast) & !is.na(bold) ~ 'diff',
vsearch == nbayes & vsearch == sintax & !is.na(blast) & !is.na(bold) ~ 'diff')) %>%
mutate(vs_st_bo = case_when(vsearch == bold & vsearch == sintax & is.na(blast) &  is.na(nbayes) ~ 'match',
vsearch == bold & vsearch == sintax & !is.na(blast) & is.na(nbayes) ~ 'diff',
vsearch == bold & vsearch == sintax & is.na(blast) & !is.na(nbayes) ~ 'diff',
vsearch == bold & vsearch == sintax & !is.na(blast) & !is.na(nbayes) ~ 'diff')) %>%
mutate(vs_nb_bo = case_when(vsearch == bold & vsearch == nbayes & is.na(blast) &  is.na(sintax) ~ 'match',
vsearch == bold & vsearch == nbayes & !is.na(blast) & is.na(sintax) ~ 'diff',
vsearch == bold & vsearch == nbayes & is.na(blast) & !is.na(sintax) ~ 'diff',
vsearch == bold & vsearch == nbayes & !is.na(blast) & !is.na(sintax) ~ 'diff')) %>%
mutate(st_nb_bo = case_when(sintax == nbayes & bold == sintax & is.na(vsearch) &  is.na(blast) ~ 'match',
sintax == nbayes & bold == sintax & !is.na(vsearch) & is.na(blast) ~ 'diff',
sintax == nbayes & bold == sintax & is.na(vsearch) & !is.na(blast) ~ 'diff',
sintax == nbayes & bold == sintax & !is.na(vsearch) & !is.na(blast) ~ 'diff')) %>%
select(-blast, -vsearch, -sintax, -nbayes, -bold, -level)
drop_match3 <- match3_tmp %>%
filter(!is.na(bl_vs_st) | !is.na(bl_vs_nb) | !is.na(bl_vs_bo) | !is.na(bl_st_bo) | !is.na(bl_nb_st) |
!is.na(bl_nb_bo) | !is.na(vs_st_nb) | !is.na(vs_st_bo) | !is.na(vs_nb_bo) | !is.na(st_nb_bo)) %>%
pull(HashID)
drop_match4 <- c(drop_match1, drop_match2, drop_match3)
match4_tmp <- tmp_df %>%
filter(!HashID %in% drop_match4) %>%
mutate(bl_vs = case_when(blast == vsearch & is.na(sintax) & is.na(nbayes) &  is.na(bold) ~ 'match',
blast == vsearch & !is.na(nbayes) & is.na(bold) & is.na(sintax) ~ 'diff',
blast == vsearch & is.na(nbayes) & !is.na(bold) & is.na(sintax) ~ 'diff',
blast == vsearch & is.na(nbayes) & is.na(bold) & !is.na(sintax) ~ 'diff')) %>%
mutate(bl_nb = case_when(blast == nbayes & is.na(sintax) &  is.na(bold) & is.na(vsearch) ~ 'match',
blast == nbayes & !is.na(sintax) & is.na(bold) & is.na(vsearch) ~ 'diff',
blast == nbayes & is.na(sintax) & !is.na(bold) & is.na(vsearch) ~ 'diff',
blast == nbayes & is.na(sintax) & is.na(bold) & !is.na(vsearch) ~ 'diff')) %>%
mutate(bl_bo = case_when(blast == bold & is.na(nbayes) &  is.na(sintax) & is.na(vsearch) ~ 'match',
blast == bold & !is.na(nbayes) & is.na(sintax) & is.na(vsearch) ~ 'diff',
blast == bold & is.na(nbayes) & !is.na(sintax) & is.na(vsearch) ~ 'diff',
blast == bold & is.na(nbayes) & is.na(sintax) & !is.na(vsearch) ~ 'diff')) %>%
mutate(bl_st = case_when(blast == sintax & is.na(nbayes) &  is.na(vsearch) & is.na(bold) ~ 'match',
blast == sintax & !is.na(nbayes) & is.na(vsearch) & is.na(bold) ~ 'diff',
blast == sintax & is.na(nbayes) & !is.na(vsearch) & is.na(bold) ~ 'diff',
blast == sintax & is.na(nbayes) & is.na(vsearch) & !is.na(bold) ~ 'diff')) %>%
mutate(vs_st = case_when(vsearch == sintax & is.na(blast) &  is.na(bold) & is.na(nbayes) ~ 'match',
vsearch == sintax & !is.na(blast) & is.na(bold) & is.na(nbayes) ~ 'diff',
vsearch == sintax & is.na(blast) & !is.na(bold) & is.na(nbayes) ~ 'diff',
vsearch == sintax & is.na(blast) & is.na(bold) & !is.na(nbayes) ~ 'diff')) %>%
mutate(vs_nb = case_when(vsearch == nbayes & is.na(blast) &  is.na(bold) & is.na(sintax) ~ 'match',
vsearch == nbayes & !is.na(blast) & is.na(bold) & is.na(sintax) ~ 'diff',
vsearch == nbayes & is.na(blast) & !is.na(bold) & is.na(sintax) ~ 'diff',
vsearch == nbayes & is.na(blast) & is.na(bold) & !is.na(sintax) ~ 'diff')) %>%
mutate(vs_bo = case_when(vsearch == bold & is.na(blast) &  is.na(sintax) & is.na(nbayes) ~ 'match',
vsearch == bold & !is.na(blast) & is.na(sintax) & is.na(nbayes) ~ 'diff',
vsearch == bold & is.na(blast) & !is.na(sintax) & is.na(nbayes) ~ 'diff',
vsearch == bold & is.na(blast) & is.na(sintax) & !is.na(nbayes) ~ 'diff')) %>%
mutate(st_nb = case_when(sintax == nbayes & is.na(blast) &  is.na(bold) & is.na(vsearch) ~ 'match',
sintax == nbayes & !is.na(blast) & is.na(bold) & is.na(vsearch) ~ 'diff',
sintax == nbayes & is.na(blast) & !is.na(bold) & is.na(vsearch) ~ 'diff',
sintax == nbayes & is.na(blast) & is.na(bold) & !is.na(vsearch) ~ 'diff')) %>%
mutate(st_bo = case_when(sintax == bold & is.na(blast) &  is.na(nbayes) & is.na(vsearch) ~ 'match',
sintax == bold & !is.na(blast) & is.na(nbayes) & is.na(vsearch) ~ 'diff',
sintax == bold & is.na(blast) & !is.na(nbayes) & is.na(vsearch) ~ 'diff',
sintax == bold & is.na(blast) & is.na(nbayes) & !is.na(vsearch) ~ 'diff')) %>%
mutate(nb_bo = case_when(nbayes == bold & is.na(blast) &  is.na(sintax) & is.na(vsearch) ~ 'match',
nbayes == bold & !is.na(blast) & is.na(sintax) & is.na(vsearch) ~ 'diff',
nbayes == bold & is.na(blast) & !is.na(sintax) & is.na(vsearch) ~ 'diff',
nbayes == bold & is.na(blast) & is.na(sintax) & !is.na(vsearch) ~ 'diff')) %>%
select(-blast, -vsearch, -sintax, -nbayes, -bold, -level)
drop_match4 <- match4_tmp %>%
filter(!is.na(bl_vs) | !is.na(bl_nb) | !is.na(bl_bo) | !is.na(bl_st) | !is.na(vs_st) |
!is.na(vs_nb) | !is.na(vs_bo) | !is.na(st_nb) | !is.na(st_bo) | !is.na(nb_bo)) %>%
pull(HashID)
drop_match5 <- c(drop_match1, drop_match2, drop_match3, drop_match4)
match5_tmp <- tmp_df %>%
filter(!HashID %in% drop_match5) %>%
mutate(uniq_bl = case_when(!is.na(blast) & is.na(vsearch) & is.na(sintax) & is.na(nbayes) & is.na(bold) ~ 'match')) %>%
mutate(uniq_vs = case_when(!is.na(vsearch) & is.na(blast) & is.na(sintax) & is.na(nbayes) & is.na(bold) ~ 'match')) %>%
mutate(uniq_st = case_when(!is.na(sintax) & is.na(blast) & is.na(vsearch) & is.na(nbayes) & is.na(bold) ~ 'match')) %>%
mutate(uniq_nb = case_when(!is.na(nbayes) & is.na(blast) & is.na(vsearch) & is.na(sintax) & is.na(bold) ~ 'match')) %>%
mutate(uniq_bo = case_when(!is.na(bold) & is.na(blast) & is.na(vsearch) & is.na(sintax) & is.na(nbayes) ~ 'match')) %>%
select(-level, -blast, -vsearch, -sintax, -nbayes, -bold)
match_joind <- left_join(match1_tmp, match2_tmp) %>%
left_join(., match3_tmp) %>%
left_join(., match4_tmp) %>%
left_join(., match5_tmp)
tmp_out <- as.data.frame(match_joind %>%
gather(key = "MatchType", value = "Value", -HashID, na.rm = TRUE) %>%
group_by(MatchType, Value) %>%
summarise(counts=n()))
#  indexthis <- tmp_out$Value == "diff"
#  tmp_out$counts[indexthis] <- -abs(tmp_out$counts[indexthis])
tmp_out %>% mutate(Level = TaxaLevel)
}
species_dat <- plotdatfunction("Species")
genus_dat <- plotdatfunction("Genus")
family_dat <- plotdatfunction("Family")
order_dat <- plotdatfunction("Order")
class_dat <- plotdatfunction("Class")
all_dat <- rbind(species_dat, genus_dat, family_dat, order_dat, class_dat)
rm(species_dat, genus_dat, family_dat, order_dat, class_dat)
all_dat <- all_dat %>%
group_by(Level) %>%
mutate(TotalCounts = sum(counts)) %>%
mutate(FracCounts = counts/TotalCounts)
################################################################################
## 3. plots
################################################################################
## theme for plot
theme_devon <- function () {
theme_bw(base_size=12, base_family="Avenir") %+replace%
theme(
panel.background  = element_blank(),
plot.background = element_rect(fill="transparent", colour=NA),
legend.background = element_rect(fill="transparent", colour=NA),
legend.key = element_rect(fill="transparent", colour=NA)
)
}
## going to limit our plots to just Class, Family, and Species rank (rather than plotting all 5...)
plotTaxaLevels <- c("Order", "Family", "Genus", "Species") ## make sure to change Levels being set as factors below if this is changed!
plot_dat <- all_dat %>% filter(Level %in% plotTaxaLevels)
## set levels
plot_dat$Level <- factor(plot_dat$Level, levels = c("Order", "Family", "Genus", "Species"))  ## change this if you update plotTaxaLevels term!
## main plot
ptop <- ggplot(plot_dat %>% filter(FracCounts >= 0.03),
aes(x = reorder(MatchType, -counts, sum),
y = counts)) +
geom_bar(stat="identity", position=position_dodge(width = 1)) +
facet_wrap(~Level, nrow=4, scales = "free_y") +
scale_y_continuous(breaks = scales::pretty_breaks(3), limits = c(-800, NA)) +
theme_devon() +
labs(x="", y="shared taxa names\n") +
geom_text(aes(x=reorder(MatchType, -counts, sum),
y=-200,
label=counts),
data=plot_dat %>% filter(FracCounts >= 0.03),
size = 3,
vjust = 1) +
theme(strip.text = element_text(size = 13),
axis.text.x = element_blank(), axis.ticks.x = element_blank(),
plot.margin = unit(c(1,1,0,1), "lines"))
## dot plot below
classifier_plotdat <- c(rep("blast", 9), rep("vsearch", 9), rep("nbayes", 9), rep("sintax", 9), rep("bold", 9))
matchtype_plotdat <- rep(c("allMatch", "Not_bo", "st_nb", "uniq_st", "uniq_nb",
"uniq_bo", "bl_vs_st", "st_nb_bo", "Not_nb"),5)
testplotdat <- data.frame(classifier_plotdat, matchtype_plotdat)
testplotdat$dot <- c(1,1,0,0,0,0,1,0,1,      # blast
1,1,0,0,0,0,1,0,1,      # vsearch
1,1,1,0,0,1,0,1,0,      # nbayes
1,1,1,1,0,0,1,1,1,      # sintax
1,0,0,0,1,0,0,1,1)      # bold
testplotdat$dot2 <- ifelse(testplotdat$dot==0, NA, 1)
testplotdat$dot2 <- as.character(testplotdat$dot2)
testplotdat$classifier_plotdat <- factor(testplotdat$classifier_plotdat,
levels = c("bold", "sintax", "nbayes", "vsearch", "blast"))
testplotdat$matchtype_plotdat <- factor(testplotdat$matchtype_plotdat,
levels = c("allMatch", "Not_bo", "st_nb", "uniq_st", "uniq_nb",
"uniq_bo", "bl_vs_st", "st_nb_bo", "Not_nb"))
pbot <- ggplot(testplotdat,
aes(x=matchtype_plotdat, y=classifier_plotdat, color=dot2, group=matchtype_plotdat)) +
geom_point(size = 3) +
geom_line(data = testplotdat,
aes(x=matchtype_plotdat,
y=classifier_plotdat,
group=matchtype_plotdat),
color="black") +
scale_color_manual(values = "gray20", na.value="gray75") +
theme_devon() +
labs(x="", y="", color="") +
theme(legend.position = "none",
axis.text.x = element_blank(), axis.ticks.x = element_blank(),
plot.margin = unit(c(0,1,1,1), "lines"))
## stitch all these various plots together
pright <- ggarrange(ptop, pbot, nrow = 2, heights = c(1, .15), align = "v")
plot1_dat$level <- factor(plot1_dat$level, levels = c("Order", "Family", "Genus", "Species"))
plot1_dat$Classifier <- factor(plot1_dat$Classifier, levels = c("blast", "vsearch", "nbayes", "sintax", "bold"))
ptopleft <- ggplot(plot1_dat, aes(x=Classifier, y=nTaxa)) +
geom_bar(stat="identity") +
scale_y_continuous(limits = c(-1200,NA)) +
facet_wrap(~ level, nrow=4) +
labs(x="", y="taxa with names classified\n") +
theme_devon() +
theme(strip.text = element_text(size = 13),
plot.margin = unit(c(1,1,0,1), "lines")) +
geom_text(aes(x=Classifier,
y=-400,
label=nTaxa),
data=plot1_dat,
size = 3,
vjust = 1)
pleft <- ggarrange(ptopleft, NULL, nrow = 2, heights = c(1, .15), align = "v")
## finally, pull it all together
## couldn't get the facets to line up perfectly, so I exported to Illustrator to clean up alignment
## save as 'figure7_classifierComps'; export at 900w x 750h
ggarrange(pleft, pright, ncol = 2, widths = c(.75, 1), align = "h", labels = c("A", "B"))
library(tidyverse)
library(reshape2)
## read in Data
readerfunction <- function(urlpath) {
tmp <- read_delim(file = urlpath, delim = "\t", col_names = FALSE) %>%
rename(., IMalias = X1, Taxon = X2) %>%
separate(.,
col = Taxon,
into = c("kingdom", "phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";") %>%
select(-kingdom, -phylum)
tmp <- as.data.frame(apply(tmp, 2, function(y) (gsub(".__", "", y))))
tmp <- as.data.frame(apply(tmp, 2, function(y) (gsub("^$|^ $", NA, y))))
tmp <- as.data.frame(apply(tmp, 2, function(y) (gsub("^NA$", NA, y))))
tmp <- as.data.frame(apply(tmp, 2, function(y) (gsub("Unassigned", NA, y))))
tmp[] <- lapply(tmp, as.character)
tmp %>% gather(key = level, value = Taxon, -IMalias)
}
exp_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/expected_mockData/mock_expected_taxa.txt"
bo95_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/bold/boldAPI_mock_lca95.txt"
bo97_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/bold/boldAPI_mock_lca97.txt"
bo99_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/bold/boldAPI_mock_lca99.txt"
nb30_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/nbayes/nbayes_conf30.txt"
nb50_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/nbayes/nbayes_conf50.txt"
nb70_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/nbayes/nbayes_conf70.txt"
nb80_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/nbayes/nbayes_conf80.txt"
nb90_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/nbayes/nbayes_conf90.txt"
c
sn30_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/sintax/sin_c30.txt"
sn50_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/sintax/sin_c50.txt"
sn70_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/sintax/sin_c70.txt"
sn80_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/sintax/sin_c80.txt"
sn90_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/sintax/sin_c90.txt"
bl95_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/bold/bl95.txt"
bl97_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/bold/bl97.txt"
bl99_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/bold/bl99.txt"
vs95_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/vsearch/vs95.txt"
vs97_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/vsearch/vs97.txt"
vs99_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/vsearch/vs99.txt"
vs95top_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/vsearch/vs95top.txt"
vs97top_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/vsearch/vs97top.txt"
vs99top_url <- "https://github.com/devonorourke/tidybug/raw/master/data/classify_comps/mock_comps/observed_mockData/vsearch/vs99top.txt"
exp_df <- readerfunction(exp_url)
nb30_df <- readerfunction(nb30_url)
nb50_df <- readerfunction(nb50_url)
nb70_df <- readerfunction(nb70_url)
nb80_df <- readerfunction(nb80_url)
nb90_df <- readerfunction(nb90_url)
sn30_df <- readerfunction(sn30_url)
sn50_df <- readerfunction(sn50_url)
sn70_df <- readerfunction(sn70_url)
sn80_df <- readerfunction(sn80_url)
sn90_df <- readerfunction(sn90_url)
bl95_df <- readerfunction(bl95_url)
bl97_df <- readerfunction(bl97_url)
bl99_df <- readerfunction(bl99_url)
bo95_df <- readerfunction(bo95_url)
bo97_df <- readerfunction(bo97_url)
bo99_df <- readerfunction(bo99_url)
vs95_df <- readerfunction(vs95_url)
vs97_df <- readerfunction(vs97_url)
vs99_df <- readerfunction(vs99_url)
vs95top_df <- readerfunction(vs95top_url)
vs97top_df <- readerfunction(vs97top_url)
vs99top_df <- readerfunction(vs99top_url)
## evaluate the FalsePositive, FalseNegative, TruePositive, and TrueNegative conditions for each taxa, at each Level
## merge two datasets:
truthfunction <- function(obs_data, classifier, parameter) {
selectTests <- c("TAR", "TDR", "F")
tmp1 <- inner_join(exp_df, obs_data, by = c("IMalias", "level"), suffix = c("_exp", "_obs")) %>%
mutate(truth = case_when(
Taxon_exp == Taxon_obs  ~ "TP",
is.na(Taxon_exp) == is.na(Taxon_obs)  ~ "TN",
is.na(Taxon_exp) & !is.na(Taxon_obs)  ~ "FP",
!is.na(Taxon_exp) & is.na(Taxon_obs)  ~ "FN")) %>%
select(-starts_with("Taxon")) %>%
group_by(level, truth) %>%
summarize(counts = n()) %>%
spread(truth, counts, fill = 0)
if (is.null(tmp1$FP)) {
tmp2 <- data.frame(tmp1, FP = rep(0, 5))
} else {
tmp2 <- tmp1
}
tmp2 %>%
group_by(level) %>%
mutate(TAR = TP / (TP + FP)) %>%
mutate(TDR = TP / (TP + FN)) %>%
mutate(F = 2 * ((TAR*TDR)/(TAR+TDR))) %>%
melt(., id.vars = 'level', value.name = 'Score', variable.name = 'Metric') %>%
filter(Metric %in% selectTests) %>%
mutate(Classifier = classifier) %>%
mutate(Parameter = parameter)
}
bo95_tmp_dat <- truthfunction(bo95_df, "boldAPI+LCA", "95")
bo97_tmp_dat <- truthfunction(bo97_df, "boldAPI+LCA", "97")
bo99_tmp_dat <- truthfunction(bo99_df, "boldAPI+LCA", "99")
sn30_tmp_dat <- truthfunction(sn30_df, "SINTAX (vsearch)", "30")
sn50_tmp_dat <- truthfunction(sn50_df, "SINTAX (vsearch)", "50")
sn70_tmp_dat <- truthfunction(sn70_df, "SINTAX (vsearch)", "70")
sn80_tmp_dat <- truthfunction(sn80_df, "SINTAX (vsearch)", "80")
sn90_tmp_dat <- truthfunction(sn90_df, "SINTAX (vsearch)", "90")
nb30_tmp_dat <- truthfunction(nb30_df, "NaiveBayes (q2)", "30")
nb50_tmp_dat <- truthfunction(nb50_df, "NaiveBayes (q2)", "50")
nb70_tmp_dat <- truthfunction(nb70_df, "NaiveBayes (q2)", "70")
nb80_tmp_dat <- truthfunction(nb80_df, "NaiveBayes (q2)", "80")
nb90_tmp_dat <- truthfunction(nb90_df, "NaiveBayes (q2)", "90")
bl95_tmp_dat <- truthfunction(bl95_df, "BLAST+LCA (q2)", "95")
bl97_tmp_dat <- truthfunction(bl97_df, "BLAST+LCA (q2)", "97")
bl99_tmp_dat <- truthfunction(bl99_df, "BLAST+LCA (q2)", "99")
vs95_tmp_dat <- truthfunction(vs95_df, "VSEARCH+LCA (q2)", "95")
vs97_tmp_dat <- truthfunction(vs97_df, "VSEARCH+LCA (q2)", "97")
vs99_tmp_dat <- truthfunction(vs99_df, "VSEARCH+LCA (q2)", "99")
vs95top_tmp_dat <- truthfunction(vs95top_df, "VSEARCH+LCA+top_hit (q2)", "95")
vs97top_tmp_dat <- truthfunction(vs97top_df, "VSEARCH+LCA+top_hit (q2)", "97")
vs99top_tmp_dat <- truthfunction(vs99top_df, "VSEARCH+LCA+top_hit (q2)", "99")
## combine into single dataset for plotting:
plot_dat <- rbind(bo95_tmp_dat, bo97_tmp_dat, bo99_tmp_dat,
sn30_tmp_dat, sn50_tmp_dat, sn70_tmp_dat, sn80_tmp_dat, sn90_tmp_dat,
nb30_tmp_dat, nb50_tmp_dat, nb70_tmp_dat, nb80_tmp_dat, nb90_tmp_dat,
bl95_tmp_dat, bl97_tmp_dat, bl99_tmp_dat,
vs95_tmp_dat, vs97_tmp_dat, vs99_tmp_dat,
vs95top_tmp_dat, vs97top_tmp_dat, vs99top_tmp_dat)
rm(bo95_tmp_dat, bo97_tmp_dat, bo99_tmp_dat,
sn30_tmp_dat, sn50_tmp_dat, sn70_tmp_dat, sn80_tmp_dat, sn90_tmp_dat,
nb30_tmp_dat, nb50_tmp_dat, nb70_tmp_dat, nb80_tmp_dat, nb90_tmp_dat,
bl95_tmp_dat, bl97_tmp_dat, bl99_tmp_dat,
vs95_tmp_dat, vs97_tmp_dat, vs99_tmp_dat,
vs95top_tmp_dat, vs97top_tmp_dat, vs99top_tmp_dat)
rm(list = ls(pattern = "*_url"))
theme_devon <- function () {
theme_bw(base_size=12, base_family="Avenir") %+replace%
theme(
panel.background  = element_blank(),
plot.background = element_rect(fill="transparent", colour=NA),
legend.background = element_rect(fill="transparent", colour=NA),
legend.key = element_rect(fill="transparent", colour=NA)
)
}
## palette for plot
# red, orange, aqua, magenta, darkblue
#pal5 <- c("#D55E00", '#E69F00', 'bur' '#009E73', '#CC79A7', '#0072B2')
pal6 <- c("#D55E00", 'orange', 'darkorange', '#009E73', '#CC79A7', '#0072B2')
## set levels for plot
plot_dat$level <- factor(plot_dat$level,
levels = c("Class", "Order", "Family", "Genus", "Species"))
plot_dat$Classifier <- factor(plot_dat$Classifier,
levels = c("BLAST+LCA (q2)", "VSEARCH+LCA (q2)", "VSEARCH+LCA+top_hit (q2)","NaiveBayes (q2)", "SINTAX (vsearch)", "boldAPI+LCA"))
## and plot; save as
pdodge_val = 0.75
ymin_val = 0.3
## save as Figure6_classifierComps; export at 1200x600
ggplot(plot_dat %>% filter(Metric == "TDR"),
aes(x=level, y=Score, color=Classifier, group=Classifier, label=Parameter, shape=Classifier)) +
geom_linerange(aes(ymin=ymin_val, ymax=Score),
color="gray50",
position = position_dodge(width = pdodge_val),
size = 1.5) +
geom_point(size=9,
position = position_dodge(pdodge_val)) +
scale_color_manual(values = pal6) +
scale_shape_manual(values = c(15,15,15,15,15,15)) +
geom_point(size=6, position = position_dodge(pdodge_val), color="white") +
geom_text(size = 3, position = position_dodge(pdodge_val), color="black") +
theme_devon() +
theme(legend.position="top",
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.text = element_text(size=13),
legend.text = element_text(size=13),
legend.title = element_text(size=15),) +
labs(y = "TDR score\n", x="") +
guides(color = guide_legend(nrow = 1)) +
scale_y_continuous(limits = c(ymin_val,1))
#### this script compares the "top-hit" option in VSEARCH against the standard way
#### the output of the 99/97/05 tables show that the topHit option generates unique species names ...
#### that are absent in the general VSEARCH method. That is, "tophit" finds MORE species names, but ...
#### these are likely ambiguous in the instance with which
myorder <- c('Class','Order','Family','Genus','Species')
comp99 <- inner_join(vs99_df, vs99top_df, by = c("IMalias", "level"), suffix = c("_noTop", "_topHit")) %>%
mutate(truth = case_when(
Taxon_noTop == Taxon_topHit  ~ "bothMatch",
is.na(Taxon_noTop) == is.na(Taxon_topHit)  ~ "bothEmpty",
is.na(Taxon_noTop) & !is.na(Taxon_topHit)  ~ "onlyTopHit",
!is.na(Taxon_noTop) & is.na(Taxon_topHit)  ~ "onlyNoTop")) %>%
select(-starts_with("Taxon")) %>%
group_by(level, truth) %>%
summarize(counts = n()) %>%
spread(truth, counts, fill = 0) %>%
rename(TaxaLevel = level) %>%
as.data.frame(.)
comp99$TaxaLevel <- factor(comp99$TaxaLevel,
levels = c('Class','Order','Family','Genus','Species'))
comp99 <- comp99[order(comp99$TaxaLevel),]
comp97 <- inner_join(vs97_df, vs97top_df, by = c("IMalias", "level"), suffix = c("_noTop", "_topHit")) %>%
mutate(truth = case_when(
Taxon_noTop == Taxon_topHit  ~ "bothMatch",
is.na(Taxon_noTop) == is.na(Taxon_topHit)  ~ "bothEmpty",
is.na(Taxon_noTop) & !is.na(Taxon_topHit)  ~ "onlyTopHit",
!is.na(Taxon_noTop) & is.na(Taxon_topHit)  ~ "onlyNoTop")) %>%
select(-starts_with("Taxon")) %>%
group_by(level, truth) %>%
summarize(counts = n()) %>%
spread(truth, counts, fill = 0) %>%
rename(TaxaLevel = level) %>%
as.data.frame(.)
comp97$TaxaLevel <- factor(comp97$TaxaLevel,
levels = c('Class','Order','Family','Genus','Species'))
comp97 <- comp97[order(comp97$TaxaLevel),]
comp95 <- inner_join(vs95_df, vs95top_df, by = c("IMalias", "level"), suffix = c("_noTop", "_topHit")) %>%
mutate(truth = case_when(
Taxon_noTop == Taxon_topHit  ~ "bothMatch",
is.na(Taxon_noTop) == is.na(Taxon_topHit)  ~ "bothEmpty",
is.na(Taxon_noTop) & !is.na(Taxon_topHit)  ~ "onlyTopHit",
!is.na(Taxon_noTop) & is.na(Taxon_topHit)  ~ "onlyNoTop")) %>%
select(-starts_with("Taxon")) %>%
group_by(level, truth) %>%
summarize(counts = n()) %>%
spread(truth, counts, fill = 0) %>%
rename(TaxaLevel = level) %>%
as.data.frame(.)
comp95$TaxaLevel <- factor(comp95$TaxaLevel,
levels = c('Class','Order','Family','Genus','Species'))
comp95 <- comp95[order(comp95$TaxaLevel),]
