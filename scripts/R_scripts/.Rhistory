scree.dada2.standard.mori <- screeplot.function(mat.dada2.standard, distance = "morisita", Method = "dada2", Filt = "standard", BetaType="mori")
scree.dada2.extra.dice <- screeplot.function(mat.dada2.extra, binary = TRUE, Method = "dada2", Filt = "extra", BetaType="dice")
scree.dada2.extra.bray <- screeplot.function(mat.dada2.extra, Method = "dada2", Filt = "extra", BetaType="bray")
scree.dada2.extra.mori <- screeplot.function(mat.dada2.extra, distance = "morisita", Method = "dada2", Filt = "extra", BetaType="mori")
scree.deblur.basic.dice <- screeplot.function(mat.deblur.basic, binary = TRUE, Method = "deblur", Filt = "basic", BetaType="dice")
scree.deblur.basic.bray <- screeplot.function(mat.deblur.basic, Method = "deblur", Filt = "basic", BetaType="bray")
scree.deblur.basic.mori <- screeplot.function(mat.deblur.basic, distance = "morisita", Method = "deblur", Filt = "basic", BetaType="mori")
scree.deblur.standard.dice <- screeplot.function(mat.deblur.standard, binary = TRUE, Method = "deblur", Filt = "standard", BetaType="dice")
scree.deblur.standard.bray <- screeplot.function(mat.deblur.standard, Method = "deblur", Filt = "standard", BetaType="bray")
scree.deblur.standard.mori <- screeplot.function(mat.deblur.standard, distance = "morisita", Method = "deblur", Filt = "standard", BetaType="mori")
scree.deblur.extra.dice <- screeplot.function(mat.deblur.extra, binary = TRUE, Method = "deblur", Filt = "extra", BetaType="dice")
scree.deblur.extra.bray <- screeplot.function(mat.deblur.extra, Method = "deblur", Filt = "extra", BetaType="bray")
scree.deblur.extra.mori <- screeplot.function(mat.deblur.extra, distance = "morisita", Method = "deblur", Filt = "extra", BetaType="mori")
scree.vsearch.basic.dice <- screeplot.function(mat.vsearch.basic, binary = TRUE, Method = "vsearch", Filt = "basic", BetaType="dice")
scree.vsearch.basic.bray <- screeplot.function(mat.vsearch.basic, Method = "vsearch", Filt = "basic", BetaType="bray")
scree.vsearch.basic.mori <- screeplot.function(mat.vsearch.basic, distance = "morisita", Method = "vsearch", Filt = "basic", BetaType="mori")
scree.vsearch.standard.dice <- screeplot.function(mat.vsearch.standard, binary = TRUE, Method = "vsearch", Filt = "standard", BetaType="dice")
scree.vsearch.standard.bray <- screeplot.function(mat.vsearch.standard, Method = "vsearch", Filt = "standard", BetaType="bray")
scree.vsearch.standard.mori <- screeplot.function(mat.vsearch.standard, distance = "morisita", Method = "vsearch", Filt = "standard", BetaType="mori")
scree.vsearch.extra.dice <- screeplot.function(mat.vsearch.extra, binary = TRUE, Method = "vsearch", Filt = "extra", BetaType="dice")
scree.vsearch.extra.bray <- screeplot.function(mat.vsearch.extra, Method = "vsearch", Filt = "extra", BetaType="bray")
scree.vsearch.extra.mori <- screeplot.function(mat.vsearch.extra, distance = "morisita", Method = "vsearch", Filt = "extra", BetaType="mori")
tmp_df <- do.call("rbind", list=ls(pattern = "scree.*"))
dflist <- ls(pattern = "scree.*")
tmp_df <- do.call("rbind", list=dflist)
str(dflist)
dflist <- as.list(ls(pattern = "scree.*"))
str(dflist)
tmp_df <- do.call("rbind", dflist)
View(tmp_df)
tmp_df <- do.call("rbind", list(dflist))
View(tmp_df)
dflist <- ls(pattern = "scree.*")
tmp_df <- do.call("rbind", list(dflist))
tmp_df <- do.call("rbind", dflist)
tmp_df <- mget(dflist) %>% bind_rows()
tmp_df <- docall(rbind, mget(dflist))
tmp_df <- do.call(rbind, mget(dflist))
tmp_df <- do.call('rbind', mget(dflist))
tmp_df <- do.call("rbind", mget(ls(pattern = "scree.*")))
tmp_df <- do.call("rbind", mget(ls(pattern = "scree*")))
dflist <- ls(pattern = "scree.*")
dflist
dflist <- ls(pattern = "scree\\.*")
dflist
dflist <- ls(pattern = "scree\\..*")
dflist
tmp_df <- do.call("rbind", mget(ls(pattern = "scree\\.*")))
tmp_df <- do.call("rbind", mget(dflist))
tmp_df <- do.call("rbind", mget(ls(pattern = "scree\\..*")))
head(tmp_df)
## plot
ggplot(data = tmp_df, aes(x=dims, y=stress, color=BetaType)) +
geom_point() + geom_line() +
facet_grid(Method ~ Filt)
## plot
ggplot(data = tmp_df, aes(x=dims, y=stress, color=BetaType)) +
geom_point() + geom_line() + geom_hline(yintercept = 0.15, linetype = "dashed", color = "red") +
facet_grid(Method ~ Filt)
## plot
ggplot(data = tmp_df, aes(x=dims, y=stress, color=BetaType)) +
geom_point() + geom_line() + geom_hline(yintercept = 0.15, linetype = "dashed", color = "red") +
scale_color_manual(values = c('#9f9244', '#6c42b8', '#628a47')) +
facet_grid(Method ~ Filt)
## plot
ggplot(data = tmp_df, aes(x=dims, y=stress, color=Filt)) +
geom_point() + geom_line() + geom_hline(yintercept = 0.15, linetype = "dashed", color = "red") +
scale_color_manual(values = c('#9f9244', '#6c42b8', '#628a47')) +
facet_grid(Method ~ BetaType)
## combine all scree plot data
scree_df <- do.call("rbind", mget(ls(pattern = "scree\\..*")))
rm(tmp_df)
## set levels
scree_df$Filt <- factor(scree_df$Filt, levels = c("basic", "standard", "extra"))
scree_df$BetaType <- factor(scree_df$BetaType, levels = c("dice", "bray", "mori"))
## plot
ggplot(data = scree_df, aes(x=dims, y=stress, color=Filt)) +
geom_point() + geom_line() + geom_hline(yintercept = 0.15, linetype = "dashed", color = "red") +
scale_color_manual(values = c('#9f9244', '#6c42b8', '#628a47')) +
facet_grid(Method ~ BetaType)
## plot
ggplot(data = scree_df, aes(x=dims, y=stress, color=Filt)) +
geom_point() + geom_line() + geom_hline(yintercept = 0.1, linetype = "dashed", color = "red") +
scale_color_manual(values = c('#9f9244', '#6c42b8', '#628a47')) +
facet_grid(Method ~ BetaType)
## plot
ggplot(data = scree_df, aes(x=dims, y=stress, color=Filt)) +
geom_point() + geom_line() + geom_hline(yintercept = 0.1, linetype = "dashed", color = "firebrick", alpha=0.5) +
scale_color_manual(values = c('#9f9244', '#6c42b8', '#628a47')) +
facet_grid(Method ~ BetaType)
## plot
ggplot(data = scree_df, aes(x=dims, y=stress, color=Filt)) +
geom_hline(yintercept = 0.1, linetype = "dashed", color = "firebrick", alpha=0.5) +
geom_line(alpha=0.5) +
geom_point() +
scale_color_manual(values = c('#9f9244', '#6c42b8', '#628a47')) +
facet_grid(Method ~ BetaType)
## plot
ggplot(data = scree_df, aes(x=dims, y=stress, color=Filt)) +
geom_hline(yintercept = 0.1, linetype = "dashed", color = "firebrick", alpha=0.5) +
geom_line(alpha=0.5) +
geom_point() +
scale_color_manual(values = c('#9f9244', '#6c42b8', '#628a47')) +
scale_x_continuous(breaks = c(seq(1:6))) +
facet_grid(Method ~ BetaType)
theme_devon <- function () {
theme_bw(base_size=12, base_family="Avenir") %+replace%
theme(
panel.background  = element_blank(),
plot.background = element_rect(fill="transparent", colour=NA),
legend.background = element_rect(fill="transparent", colour=NA),
legend.key = element_rect(fill="transparent", colour=NA)
)
}
## plot
ggplot(data = scree_df, aes(x=dims, y=stress, color=Filt)) +
geom_hline(yintercept = 0.1, linetype = "dashed", color = "firebrick", alpha=0.5) +
geom_line(alpha=0.5) +
geom_point() +
scale_color_manual(values = c('#9f9244', '#6c42b8', '#628a47')) +
#scale_x_continuous(breaks = c(seq(1:6))) +
facet_grid(Method ~ BetaType)  +
labs(x="dimensions", y="stress", color = "Filtering\nParameter") +
theme_devon() +
theme(legend.position="top")
rm(ls(pattern = "scree\\..*"))
rm(list=ls(pattern = "scree\\..*"))
## calculate distances
dist.dada2.basic.dice <- vegdist(mat.dada2.basic, method = "bray", binary = TRUE)
dist.dada2.basic.bray <- vegdist(mat.dada2.basic, method = "bray", binary = FALSE)
dist.dada2.basic.mori <- vegdist(mat.dada2.basic, method = "morisita", binary = FALSE)
## calculate distances and run NMDS for each Filt, Method, Betatest
nmdsfunction.function <- function(data, test, binaryval, Method, Filt, BetaType) {
tmp.dist <- vegdist(data, method = test, binary = binaryval)
tmp.nmds <- metaMDS(tmp.dist, k=3, try=30)
tmp.nmds.df <- data.frame(tmp.nmds$points)
tmp.nmds.df %>% mutate(Method = Method) %>% mutate(Filt = Filt) %>% mutate(BetaType = BetaType)
}
nmds.dada2.basic.dice <- nmdsfunction.function(mat.dada2.basic, "bray", TRUE, "dada2", "basic", "dice")
View(nmds.dada2.basic.dice)
nmds.dada2.basic.bray <- nmdsfunction.function(mat.dada2.basic, "bray", FALSE, "dada2", "basic", "bray")
nmds.dada2.basic.mori <- nmdsfunction.function(mat.dada2.basic, "morisita", FALSE, "dada2", "basic", "mori")
nmds.dada2.basic.dice <- nmdsfunction.function(mat.dada2.basic, "bray", TRUE, "dada2", "basic", "dice")
nmds.dada2.basic.bray <- nmdsfunction.function(mat.dada2.basic, "bray", FALSE, "dada2", "basic", "bray")
nmds.dada2.basic.mori <- nmdsfunction.function(mat.dada2.basic, "morisita", FALSE, "dada2", "basic", "mori")
nmds.dada2.standard.dice <- nmdsfunction.function(mat.dada2.standard, "bray", TRUE, "dada2", "standard", "dice")
nmds.dada2.standard.bray <- nmdsfunction.function(mat.dada2.standard, "bray", FALSE, "dada2", "standard", "bray")
nmds.dada2.standard.mori <- nmdsfunction.function(mat.dada2.standard, "morisita", FALSE, "dada2", "standard", "mori")
nmds.dada2.extra.dice <- nmdsfunction.function(mat.dada2.extra, "bray", TRUE, "dada2", "extra", "dice")
nmds.dada2.extra.bray <- nmdsfunction.function(mat.dada2.extra, "bray", FALSE, "dada2", "extra", "bray")
nmds.dada2.extra.mori <- nmdsfunction.function(mat.dada2.extra, "morisita", FALSE, "dada2", "extra", "mori")
nmds.deblur.basic.dice <- nmdsfunction.function(mat.deblur.basic, "bray", TRUE, "deblur", "basic", "dice")
nmds.deblur.basic.bray <- nmdsfunction.function(mat.deblur.basic, "bray", FALSE, "deblur", "basic", "bray")
nmds.deblur.basic.mori <- nmdsfunction.function(mat.deblur.basic, "morisita", FALSE, "deblur", "basic", "mori")
nmds.deblur.standard.dice <- nmdsfunction.function(mat.deblur.standard, "bray", TRUE, "deblur", "standard", "dice")
nmds.deblur.standard.bray <- nmdsfunction.function(mat.deblur.standard, "bray", FALSE, "deblur", "standard", "bray")
nmds.deblur.standard.mori <- nmdsfunction.function(mat.deblur.standard, "morisita", FALSE, "deblur", "standard", "mori")
nmds.deblur.extra.dice <- nmdsfunction.function(mat.deblur.extra, "bray", TRUE, "deblur", "extra", "dice")
nmds.deblur.extra.bray <- nmdsfunction.function(mat.deblur.extra, "bray", FALSE, "deblur", "extra", "bray")
nmds.deblur.extra.mori <- nmdsfunction.function(mat.deblur.extra, "morisita", FALSE, "deblur", "extra", "mori")
nmds.vsearch.basic.dice <- nmdsfunction.function(mat.vsearch.basic, "bray", TRUE, "vsearch", "basic", "dice")
nmds.vsearch.basic.bray <- nmdsfunction.function(mat.vsearch.basic, "bray", FALSE, "vsearch", "basic", "bray")
nmds.vsearch.basic.mori <- nmdsfunction.function(mat.vsearch.basic, "morisita", FALSE, "vsearch", "basic", "mori")
nmds.vsearch.standard.dice <- nmdsfunction.function(mat.vsearch.standard, "bray", TRUE, "vsearch", "standard", "dice")
nmds.vsearch.standard.bray <- nmdsfunction.function(mat.vsearch.standard, "bray", FALSE, "vsearch", "standard", "bray")
nmds.vsearch.standard.mori <- nmdsfunction.function(mat.vsearch.standard, "morisita", FALSE, "vsearch", "standard", "mori")
nmds.vsearch.extra.dice <- nmdsfunction.function(mat.vsearch.extra, "bray", TRUE, "vsearch", "extra", "dice")
nmds.vsearch.extra.bray <- nmdsfunction.function(mat.vsearch.extra, "bray", FALSE, "vsearch", "extra", "bray")
nmds.vsearch.extra.mori <- nmdsfunction.function(mat.vsearch.extra, "morisita", FALSE, "vsearch", "extra", "mori")
## combine all scree plot data
nmds_df <- do.call("rbind", mget(ls(pattern = "nmds\\..*")))
head(nmds_df)
## join metadata of MonthStart
tmp.fox.meta <- fox %>% distinct(SeqID, MonthStart)
View(tmp.fox.meta)
View(nmds_df)
View(mat.vsearch.basic)
## calculate distances and run NMDS for each Filt, Method, Betatest
nmdsfunction.function <- function(data, test, binaryval, Method, Filt, BetaType) {
tmp.dist <- vegdist(data, method = test, binary = binaryval)
tmp.nmds <- metaMDS(tmp.dist, k=3, try=30)
tmp.nmds.df <- data.frame(tmp.nmds$points)
tmp.nmds.df$SeqID <- row.names(tmp.nmds)
tmp.nmds.df %>% mutate(Method = Method) %>% mutate(Filt = Filt) %>% mutate(BetaType = BetaType)
}
nmds.dada2.basic.dice <- nmdsfunction.function(mat.dada2.basic, "bray", TRUE, "dada2", "basic", "dice")
View(nmds.dada2.basic.dice)
tmp.dist <- vegdist(mat.dada2.basic, method="bray", binary = TRUE)
tmp.nmds <- metaMDS(tmp.dist, k=3, try=30)
tmp.nmds.df <- data.frame(tmp.nmds$points)
tmp.nmds$data
tmp.nmds$species
View(tmp.nmds.df)
## calculate distances and run NMDS for each Filt, Method, Betatest
nmdsfunction.function <- function(data, test, binaryval, Method, Filt, BetaType) {
tmp.dist <- vegdist(data, method = test, binary = binaryval)
tmp.nmds <- metaMDS(tmp.dist, k=3, try=30)
tmp.nmds.df <- data.frame(tmp.nmds$points)
tmp.nmds.df$SeqID <- row.names(tmp.nmds.df)
tmp.nmds.df %>% mutate(Method = Method) %>% mutate(Filt = Filt) %>% mutate(BetaType = BetaType)
}
nmds.dada2.basic.dice <- nmdsfunction.function(mat.dada2.basic, "bray", TRUE, "dada2", "basic", "dice")
nmds.dada2.basic.bray <- nmdsfunction.function(mat.dada2.basic, "bray", FALSE, "dada2", "basic", "bray")
nmds.dada2.basic.mori <- nmdsfunction.function(mat.dada2.basic, "morisita", FALSE, "dada2", "basic", "mori")
nmds.dada2.standard.dice <- nmdsfunction.function(mat.dada2.standard, "bray", TRUE, "dada2", "standard", "dice")
nmds.dada2.standard.bray <- nmdsfunction.function(mat.dada2.standard, "bray", FALSE, "dada2", "standard", "bray")
nmds.dada2.standard.mori <- nmdsfunction.function(mat.dada2.standard, "morisita", FALSE, "dada2", "standard", "mori")
nmds.dada2.extra.dice <- nmdsfunction.function(mat.dada2.extra, "bray", TRUE, "dada2", "extra", "dice")
nmds.dada2.extra.bray <- nmdsfunction.function(mat.dada2.extra, "bray", FALSE, "dada2", "extra", "bray")
nmds.dada2.extra.mori <- nmdsfunction.function(mat.dada2.extra, "morisita", FALSE, "dada2", "extra", "mori")
nmds.deblur.basic.dice <- nmdsfunction.function(mat.deblur.basic, "bray", TRUE, "deblur", "basic", "dice")
nmds.deblur.basic.bray <- nmdsfunction.function(mat.deblur.basic, "bray", FALSE, "deblur", "basic", "bray")
nmds.deblur.basic.mori <- nmdsfunction.function(mat.deblur.basic, "morisita", FALSE, "deblur", "basic", "mori")
nmds.deblur.standard.dice <- nmdsfunction.function(mat.deblur.standard, "bray", TRUE, "deblur", "standard", "dice")
nmds.deblur.standard.bray <- nmdsfunction.function(mat.deblur.standard, "bray", FALSE, "deblur", "standard", "bray")
nmds.deblur.standard.mori <- nmdsfunction.function(mat.deblur.standard, "morisita", FALSE, "deblur", "standard", "mori")
nmds.deblur.extra.dice <- nmdsfunction.function(mat.deblur.extra, "bray", TRUE, "deblur", "extra", "dice")
nmds.deblur.extra.bray <- nmdsfunction.function(mat.deblur.extra, "bray", FALSE, "deblur", "extra", "bray")
nmds.deblur.extra.mori <- nmdsfunction.function(mat.deblur.extra, "morisita", FALSE, "deblur", "extra", "mori")
nmds.vsearch.basic.dice <- nmdsfunction.function(mat.vsearch.basic, "bray", TRUE, "vsearch", "basic", "dice")
nmds.vsearch.basic.bray <- nmdsfunction.function(mat.vsearch.basic, "bray", FALSE, "vsearch", "basic", "bray")
nmds.vsearch.basic.mori <- nmdsfunction.function(mat.vsearch.basic, "morisita", FALSE, "vsearch", "basic", "mori")
nmds.vsearch.standard.dice <- nmdsfunction.function(mat.vsearch.standard, "bray", TRUE, "vsearch", "standard", "dice")
nmds.vsearch.standard.bray <- nmdsfunction.function(mat.vsearch.standard, "bray", FALSE, "vsearch", "standard", "bray")
nmds.vsearch.standard.mori <- nmdsfunction.function(mat.vsearch.standard, "morisita", FALSE, "vsearch", "standard", "mori")
nmds.vsearch.extra.dice <- nmdsfunction.function(mat.vsearch.extra, "bray", TRUE, "vsearch", "extra", "dice")
nmds.vsearch.extra.bray <- nmdsfunction.function(mat.vsearch.extra, "bray", FALSE, "vsearch", "extra", "bray")
nmds.vsearch.extra.mori <- nmdsfunction.function(mat.vsearch.extra, "morisita", FALSE, "vsearch", "extra", "mori")
## combine all scree plot data
nmds_df <- do.call("rbind", mget(ls(pattern = "nmds\\..*")))
rm(tmp.fox.meta)
rm(tmp.nmds)
rm(tmp.nmds.df)
rm(nmds_df)
test <- ls(pattern = "nmds\\..*")
## combine all scree plot data
nmds_df <- do.call("rbind", mget(ls(pattern = "nmds\\..*")))
## join metadata of MonthStart
tmp.fox.meta <- fox %>% distinct(SeqID, MonthStart)
View(nmds_df)
View(tmp.fox.meta)
nmds_df <-
tmp <- merge(nmds_df, tmp.fox.meta, by.x="SeqID", by.y="SeqID", all.x=TRUE)
nmds_df <- merge(nmds_df, tmp.fox.meta, by.x="SeqID", by.y="SeqID", all.x=TRUE)
rm(tmp)
rm(tmp.fox.meta)
View(nmds_df)
## combine all scree plot data
nmds_df <- do.call("rbind", mget(ls(pattern = "nmds\\..*")))
## join metadata of MonthStart
tmp.fox.meta <- fox %>% distinct(SeqID, MonthStart)
nmds_df <- merge(nmds_df, tmp.fox.meta, by.x="SeqID", by.y="SeqID", all.x=TRUE)
rm(tmp.fox.meta)
facet_grid(Filt ~ Method)
## plot
ggplot(data=nmds_df %>% filter(BetaType=="dice"),
aes(x=MDS1, y=MDS2, color = MonthStart)) +
geom_point() +
facet_grid(Filt ~ Method)
rm(list=ls(pattern = "scree\\..*"))
rm(list=ls(pattern = "nmds\\..*")))
rm(list=ls(pattern = "nmds\\..*"))
montpal <- c('#d7191c', '#fdae61', '#abdda4', '#2b83ba)
montpal <- c('#d7191c', '#fdae61', '#abdda4', '#2b83ba')
montpal <- c('#d7191c', '#fdae61', '#abdda4', '#2b83ba')
rm(montpal)
monthpal <- c('#d7191c', '#fdae61', '#abdda4', '#2b83ba')
## plots are separated by BetaTest
ggplot(data=nmds_df %>% filter(BetaType=="dice"),
aes(x=MDS1, y=MDS2, color = MonthStart)) +
geom_point() +
facet_grid(Filt ~ Method) +
scale_color_manual(values = monthpal) +
labs(x='mds1', y='mds2', caption = "Dice-Sorensen index used to calculate distnaces") +
theme_devon() + theme(legend.position = "top")
rev(monthpal)
monthpal <- c("#2b83ba", "#abdda4", "#fdae61", "#d7191c")
## plots are separated by BetaTest
ggplot(data=nmds_df %>% filter(BetaType=="dice"),
aes(x=MDS1, y=MDS2, color = MonthStart)) +
geom_point() +
facet_grid(Filt ~ Method) +
scale_color_manual(values = monthpal) +
labs(x='mds1', y='mds2', caption = "Dice-Sorensen index used to calculate distnaces") +
theme_devon() + theme(legend.position = "top")
## set levels for plot
nmds_df$MonthStart <- factor(nmds_df$MonthStart, levels = c("April", "May", "September", "October"))
nmds_df$Filt <- factor(nmds_df$Filt, levels = c("basic", "standard", "extra"))
## plots are separated by BetaTest
ggplot(data=nmds_df %>% filter(BetaType=="dice"),
aes(x=MDS1, y=MDS2, color = MonthStart)) +
geom_point() +
facet_grid(Filt ~ Method) +
scale_color_manual(values = monthpal) +
labs(x='mds1', y='mds2', caption = "Dice-Sorensen index used to calculate distnaces", color = "") +
theme_devon() + theme(legend.position = "top")
## plots are separated by BetaTest
ggplot(data=nmds_df %>% filter(BetaType=="dice"),
aes(x=MDS1, y=MDS2, color = MonthStart)) +
geom_point() +
facet_grid(Filt ~ Method) +
scale_color_manual(values = monthpal) +
labs(x='mds1', y='mds2', subtitle = "Dice-Sorensen index used to calculate distnaces", color = "") +
theme_devon() + theme(legend.position = "top")
ggplot(data=nmds_df %>% filter(BetaType=="bray"),
aes(x=MDS1, y=MDS2, color = MonthStart)) +
geom_point() +
facet_grid(Filt ~ Method) +
scale_color_manual(values = monthpal) +
labs(x='mds1', y='mds2', subtitle = "Bray-Curtis index used to calculate distnaces", color = "") +
theme_devon() + theme(legend.position = "top")
ggplot(data=nmds_df %>% filter(BetaType=="mori"),
aes(x=MDS1, y=MDS2, color = MonthStart)) +
geom_point() +
facet_grid(Filt ~ Method) +
scale_color_manual(values = monthpal) +
labs(x='mds1', y='mds2', subtitle = "Morisita-Horn index used to calculate distnaces", color = "") +
theme_devon() + theme(legend.position = "top")
## plots are separated by BetaTest
## save as 16_FOX_nmds_dice; export at
ggplot(data=nmds_df %>% filter(BetaType=="dice"),
aes(x=MDS1, y=MDS2, color = MonthStart)) +
geom_point() +
facet_grid(Filt ~ Method) +
scale_color_manual(values = monthpal) +
labs(x='mds1', y='mds2', subtitle = "Dice-Sorensen index used to calculate distnaces", color = "") +
theme_devon() + theme(legend.position = "top")
ggplot(data=nmds_df %>% filter(BetaType=="bray"),
aes(x=MDS1, y=MDS2, color = MonthStart)) +
geom_point() +
facet_grid(Filt ~ Method) +
scale_color_manual(values = monthpal) +
labs(x='mds1', y='mds2', subtitle = "Bray-Curtis index used to calculate distnaces", color = "") +
theme_devon() + theme(legend.position = "top")
ggplot(data=nmds_df %>% filter(BetaType=="mori"),
aes(x=MDS1, y=MDS2, color = MonthStart)) +
geom_point() +
facet_grid(Filt ~ Method) +
scale_color_manual(values = monthpal) +
labs(x='mds1', y='mds2', subtitle = "Morisita-Horn index used to calculate distnaces", color = "") +
theme_devon() + theme(legend.position = "top")
## plots are separated by BetaTest
## save as 16_FOX_nmds_dice; export at
ggplot(data=nmds_df %>% filter(BetaType=="dice"),
aes(x=MDS1, y=MDS2, color = MonthStart)) +
geom_point() +
facet_grid(Filt ~ Method) +
scale_color_manual(values = monthpal) +
labs(x='mds1', y='mds2', subtitle = "Dice-Sorensen index used to calculate distnaces", color = "") +
theme_devon() + theme(legend.position = "top")
## save as 16_FOX_nmds_dice; export at 700x700
ggplot(data=nmds_df %>% filter(BetaType=="bray"),
aes(x=MDS1, y=MDS2, color = MonthStart)) +
geom_point() +
facet_grid(Filt ~ Method) +
scale_color_manual(values = monthpal) +
labs(x='mds1', y='mds2', subtitle = "Bray-Curtis index used to calculate distnaces", color = "") +
theme_devon() + theme(legend.position = "top")
## save as 16_FOX_nmds_mori; export at 700x700
ggplot(data=nmds_df %>% filter(BetaType=="mori"),
aes(x=MDS1, y=MDS2, color = MonthStart)) +
geom_point() +
facet_grid(Filt ~ Method) +
scale_color_manual(values = monthpal) +
labs(x='mds1', y='mds2', subtitle = "Morisita-Horn index used to calculate distnaces", color = "") +
theme_devon() + theme(legend.position = "top")
library(tidyverse)
library(scales)
library(viridis)
# create theme function for all plots
# theme function for custom plot style:
theme_devon <- function () {
theme_bw(base_size=12, base_family="Avenir") %+replace%
theme(
panel.background  = element_blank(),
plot.background = element_rect(fill="transparent", colour=NA),
legend.background = element_rect(fill="transparent", colour=NA),
legend.key = element_rect(fill="transparent", colour=NA)
)
}
## import data and select mock samples:
df <- read_csv("https://github.com/devonorourke/tidybug/raw/master/data/text_tables/all.filtmethods.df.csv.gz")
mock <- df %>% filter(SampleType == "mock")
mock$Labeler <- paste(mock$HashID, mock$Method, sep="-")
rm(df)
HashFiltLabels <- read_csv("https://github.com/devonorourke/tidybug/raw/master/data/text_tables/HashIDs_withFiltLabels.csv")  ## from '1_sequence_filter.R` script`
mock <- merge(mock, HashFiltLabels)
mock$Labeler <- NULL
rm(HashFiltLabels)
#mock <- x
mock <- mock %>% select(Method, Reads, Filt, Library, MockAlign, Alias)
## summarize number of unique ASVs per group
uniqHashTable <- mock %>% group_by(Method,Library,Filt) %>% distinct(Alias) %>% summarise(counts=n())
uniqHashTable$Merger <- paste(uniqHashTable$Method, uniqHashTable$Library, uniqHashTable$Filt, sep="-")
uniqHashTable <- uniqHashTable[,c(4:5)]
## add these to label in plot
mock$Merger <- paste(mock$Method, mock$Library, mock$Filt, sep="-")
mock <- merge(mock, uniqHashTable)
## build facet label
mock$FacetLabel <- paste(mock$Library, paste0("ASVs =  ",mock$counts), sep=" ")
## generate 3 color palette:
pal3 <- viridis::inferno(3, begin = 0.15, end = 0.85)
## reset the levels for plot
mock$MockAlign <- factor(mock$MockAlign,levels = c("exact", "partial", "miss"))
mock$Filt <- factor(mock$Filt,levels = c("basic", "standard", "extra"))
## plot; saved as '3_figure_mockSeqCounts_byFilterMethod'; export at 750x750
## note the numbero of distinct samples was manually added following the additional code below producing the `uniqHashTable` object
ggplot(data = mock, aes(x = Method, y = Reads, color=MockAlign)) +
geom_jitter(alpha=0.55, width = 0.25) +
scale_color_manual(values = pal3, name = "alignment type") +
scale_y_continuous(labels = comma, trans = "log2", limits = c(0.01,250000)) +
facet_grid(Filt ~ Library) +
labs(title="", x="", y="sequence counts", caption="") +
theme_devon() +
theme(legend.position="top", legend.text = element_text(size = 12),
panel.spacing = unit(1.5, "lines"))
ggplot(data = mock %>% filter(Filt == "basic"),
aes(x = Method, y = Reads, color=MockAlign)) +
geom_jitter(alpha=0.55, width = 0.25) +
scale_color_manual(values = pal3, name = "alignment type") +
scale_y_continuous(labels = comma, trans = "log2", limits = c(0.01,250000)) +
facet_grid(Filt ~ Library) +
labs(title="", x="", y="sequence counts", caption="") +
theme_devon() +
theme(legend.position="top", legend.text = element_text(size = 12),
panel.spacing = unit(1.5, "lines"))
ggplot(data = mock %>% filter(Filt == "standard"),
aes(x = Method, y = Reads, color=MockAlign)) +
geom_jitter(alpha=0.55, width = 0.25) +
scale_color_manual(values = pal3, name = "alignment type") +
scale_y_continuous(labels = comma, trans = "log2", limits = c(0.01,250000)) +
facet_grid(Filt ~ Library) +
labs(title="", x="", y="sequence counts", caption="") +
theme_devon() +
theme(legend.position="top", legend.text = element_text(size = 12),
panel.spacing = unit(1.5, "lines"))
ggplot(data = mock %>% filter(Filt == "extra"),
aes(x = Method, y = Reads, color=MockAlign)) +
geom_jitter(alpha=0.55, width = 0.25) +
scale_color_manual(values = pal3, name = "alignment type") +
scale_y_continuous(labels = comma, trans = "log2", limits = c(0.01,250000)) +
facet_grid(Filt ~ Library) +
labs(title="", x="", y="sequence counts", caption="") +
theme_devon() +
theme(legend.position="top", legend.text = element_text(size = 12),
panel.spacing = unit(1.5, "lines"))
library(tidyverse)
library(reshape2)
library(vegan)
library(phyloseq)
theme_devon <- function () {
theme_bw(base_size=12, base_family="Avenir") %+replace%
theme(
panel.background  = element_blank(),
plot.background = element_rect(fill="transparent", colour=NA),
legend.background = element_rect(fill="transparent", colour=NA),
legend.key = element_rect(fill="transparent", colour=NA)
)
}
## import data and select mock samples:
df <- read_csv("https://github.com/devonorourke/tidybug/raw/master/data/text_tables/all.filtmethods.df.csv.gz")
## filter out mock samples:
df <- df %>% filter(SampleType != "mock") %>% select(-StudyID, -Alias)
df$Labeler <- paste(df$Method, df$Filt, df$Library, sep="-")
## function to calculate Hill Numbers per Method + Filt (grouping all guano data among all libraries)
hill.function.wrare <- function(data, filter_exp, filter_exp2, filter_exp3) {
filter_exp_enq <- enquo(filter_exp)
filter_exp_enq2 <- enquo(filter_exp2)
filter_exp_enq3 <- enquo(filter_exp3)
tmp.df <- data %>% filter(!!filter_exp_enq) %>% filter(!!filter_exp_enq2) %>% filter(!!filter_exp_enq3)
Method <- tmp.df %>% distinct(Method)
Filt <- tmp.df %>% distinct(Filt)
tmp.mat <- dcast(tmp.df, HashID ~ SeqID, value.var = "Reads", fill=0)
row.names(tmp.mat) <- tmp.mat$HashID
tmp.mat$HashID <- NULL
tmp_otutbl <- otu_table(tmp.mat, taxa_are_rows = TRUE)
tmp_rphy <- rarefy_even_depth(tmp_otutbl, sample.size = 5000, replace = FALSE, rngseed = 123)
tmp_raremat = as(otu_table(tmp_rphy), "matrix")
tmp.hill <- renyi(t(tmp_raremat), scales = c(0,1,2), hill=TRUE)
tmp.hill <- data.frame(tmp.hill, Method, Filt, row.names = NULL)
colnames(tmp.hill)[1:3] <- c("q=0", "q=1", "q=2")
tmp_out <- gather(tmp.hill, key="Hill_qType", value = "Hill_value", c("q=0", "q=1", "q=2"))
}
rarefied.dada2.basic <- hill.function.wrare(df, Method=="dada2", Filt=="basic", SampleType=="sample")
rarefied.dada2.standard <- hill.function.wrare(df, Method=="dada2", Filt=="standard", SampleType=="sample")
rarefied.dada2.extra <- hill.function.wrare(df, Method=="dada2", Filt=="extra", SampleType=="sample")
rarefied.deblur.basic <- hill.function.wrare(df, Method=="deblur", Filt=="basic", SampleType=="sample")
rarefied.deblur.standard <- hill.function.wrare(df, Method=="deblur", Filt=="standard", SampleType=="sample")
rarefied.deblur.extra <- hill.function.wrare(df, Method=="deblur", Filt=="extra", SampleType=="sample")
rarefied.vsearch.basic <- hill.function.wrare(df, Method=="vsearch", Filt=="basic", SampleType=="sample")
rarefied.vsearch.standard <- hill.function.wrare(df, Method=="vsearch", Filt=="standard", SampleType=="sample")
rarefied.vsearch.extra <- hill.function.wrare(df, Method=="vsearch", Filt=="extra", SampleType=="sample")
## merge into single dataframe
all.guano.hill.rare <- rbind(rarefied.dada2.basic, rarefied.dada2.standard, rarefied.dada2.extra,
rarefied.deblur.basic, rarefied.deblur.standard, rarefied.deblur.extra,
rarefied.vsearch.basic, rarefied.vsearch.standard, rarefied.vsearch.extra)
rm(list=ls(pattern = "rarefied*"))
## set the levels
all.guano.hill.rare$Filt <- factor(all.guano.hill.rare$Filt, levels = c("basic", "standard", "extra"))
## palette:
pal3 <- c('#9f9244', '#6c42b8', '#628a47')
## plot; save as 5_figure_guano_HillDiversities_perPipeline ; export at 750x750
ggplot(data=all.guano.hill.rare, aes(x=Method, y=Hill_value, fill=Method)) +
geom_jitter(alpha = 0.05) +
geom_boxplot(outlier.shape = NA) +
scale_fill_manual(values = pal3) +
facet_grid(Filt ~ Hill_qType) +
scale_y_continuous(trans = "log2") +
labs(x="", y="sequence variant equivalents", color="", shape="") +
theme_devon() +
theme(legend.position = "none",
strip.text = element_text(size = 12))
