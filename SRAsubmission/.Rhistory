meta$`geographic location` <- ""
## replace existing sitecode with full description to match their geographic location term
meta$`geographic location`[which(meta$sitecode=="HOP")] = "USA: Hopkinton NH"
meta$`geographic location`[which(meta$sitecode=="ACA")] = "USA: Acadia National Park ME"
meta$`geographic location`[which(meta$sitecode=="YRK")] = "USA: Yorktown Naval Weapons Station VA"
meta$`geographic location`[which(meta$sitecode=="ELY")] = "USA: Ely Mine VT"
meta$`geographic location`[which(meta$sitecode=="BRN")] = "USA: Brown Lane Hollis NH"
meta$`geographic location`[which(meta$sitecode=="MAP")] = "USA: Maple Hill Hollis NH"
meta$`geographic location`[which(meta$sitecode=="ROL")] = "USA: Rollinsford NH"
meta$`geographic location`[which(meta$sitecode=="PEN")] = "USA: Penacook NH"
meta$`geographic location`[which(meta$sitecode=="EPS")] = "USA: Epsom NH"
meta$`geographic location`[which(meta$sitecode=="CNB")] = "USA: Canterbury NH"
meta$`geographic location`[which(meta$sitecode=="GIL")] = "USA: Gilsum NH"
meta$`geographic location`[which(meta$sitecode=="HOL")] = "USA: Holderness NH"
meta$`geographic location`[which(meta$sitecode=="CHI")] = "USA: Chichester NH"
meta$`geographic location`[which(meta$sitecode=="MAS")] = "USA: Massabesic NH"
meta$`geographic location`[which(meta$sitecode=="FOX")] = "USA: Fox State Forest NH"
meta$`geographic location`[which(meta$sitecode=="FAR")] = "USA: Fairfield ME"
meta$`geographic location`[which(meta$sitecode=="MTV")] = "USA: Mount Vernon NH"
meta$`geographic location`[which(meta$sitecode=="ALS")] = "USA: Alstead NH"
meta$`geographic location`[which(meta$`Sample type` == "mock")] = "not applicable"
meta$`geographic location`[which(meta$`Sample type` == "ncontrol")] = "not applicable"
## substitute Library codes to match figures in paper:
meta$Library[which(meta$Library == "4.1")] = "libA"
meta$Library[which(meta$Library == "4.2")] = "libB"
meta$Library[which(meta$Library == "7.1")] = "libC"
meta$Library[which(meta$Library == "7.2")] = "libD"
meta$Title <- "COI amplicons from bat guano"
meta$`Library strategy` <- 'AMPLICON'
meta$`Library source` <- 'METAGENOMIC'
meta$`Library selection` <- 'PCR'
meta$`Library layout` <- 'PAIRED'
meta$Platform <- 'ILLUMINA'
meta$`Instrument model` <- 'Illumina MiSeq'
meta$`Design description` <- 'COI amplicons generated from ANML primer pair'
meta$Filetype <- 'fastq'
meta$`Reference assembly` <- ""
meta <- merge(meta, pall_wide)
## select needed columns:
meta_library<- meta[,c(8,1,1,15:25, 2)]
colnames(meta_library)[3] <- "Library ID"
## select needed columns:
meta_library<- meta[,c(8,1,1,15:26, 2)]
colnames(meta_library)[3] <- "Library ID"
library_libB <- meta_library %>% filter(library == "libB")
library_libA <- meta_library %>% filter(Library == "libA")
library_libB <- meta_library %>% filter(Library == "libB")
library_libC <- meta_library %>% filter(Library == "libC")
library_libD <- meta_library %>% filter(Library == "libD")
write.table(library_libA, file="~/Repos/tidybug/SRAsubmission/libA_librarymeta.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(library_libB, file="~/Repos/tidybug/SRAsubmission/libB_librarymeta.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(library_libC, file="~/Repos/tidybug/SRAsubmission/libC_librarymeta.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(library_libD, file="~/Repos/tidybug/SRAsubmission/libD_librarymeta.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
View(library_libA)
View(pall_wide)
meta <- read_delim('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/clean_metadata.txt', delim = "\t")
meta <- meta[,c(5,6,11,14:15)]
colnames(meta) <- c("Sample Name", "Library", "Sample type", "sitecode", "date")
## read in manifest files of used data and identify samples in meta that generated sequence data
p41 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p41.manifest.file')
p42 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p42.manifest.file')
p71 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p71.manifest.file')
p72 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p72.manifest.file')
pall <- rbind(p41, p42, p71, p72)
colnames(pall) <- c("Sample Name", "filepath", "direction")
samplemeta <- intersect(meta$`Sample Name`, pall$`Sample Name`)
meta <- meta %>% filter(`Sample Name`%in% samplemeta)
rm(p41, p42, p71, p72, samplemeta)
View(pall)
x <- separate(pall, col = filepath, sep = "/")
x <- separate(pall, col = filepath, into = NA, sep = "/")
x <- strsplit(pall, split = "/")
x <- separate(pall, col = filepath, into = c("tmp1", "tmp2", "tmp3"), sep = "\\/")
View(x)
x <- separate(pall, col = filepath, into = c("tmp1", "tmp2", "tmp3", "tmp4", "tmp5",
"tmp6", "tmp7", "tmp8", "tmp9", "tmp10"), sep = "\\/")
View(x)
pall <- separate(pall, col = filepath, into = c("tmp1", "tmp2", "tmp3", "tmp4", "tmp5", "tmp6", "tmp7", "tmp8", "tmp9", "filename"), sep = "\\/")
pall <- pall[,c(1,11:12)]
## reshape the `pall` file from long to wide (each SampleName has two columns, one for each path to files)
pall_wide <- dcast(pall, `Sample Name` ~ direction, value.var = "filepath")
p41 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p41.manifest.file')
p42 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p42.manifest.file')
p71 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p71.manifest.file')
p72 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p72.manifest.file')
pall <- rbind(p41, p42, p71, p72)
colnames(pall) <- c("Sample Name", "filepath", "direction")
samplemeta <- intersect(meta$`Sample Name`, pall$`Sample Name`)
meta <- meta %>% filter(`Sample Name`%in% samplemeta)
rm(p41, p42, p71, p72, samplemeta)
pall <- separate(pall, col = filepath, into = c("tmp1", "tmp2", "tmp3", "tmp4", "tmp5", "tmp6", "tmp7", "tmp8", "tmp9", "filepath"), sep = "\\/")
pall <- pall[,c(1,11:12)]
## reshape the `pall` file from long to wide (each SampleName has two columns, one for each path to files)
pall_wide <- dcast(pall, `Sample Name` ~ direction, value.var = "filepath")
rm(pall)
colnames(pall_wide) <- c("Sample Name", "Filename", "filename2")
meta$`collection date` <- as.character(lubridate::mdy(meta$date))
## any samples we'd be discarding or are NA are converted to generic date
meta$`collection date`[which(meta$`Sample type` == "ncontrol")] = "not applicable"
meta$`collection date`[which(meta$`Sample type` == "mock")] = "not applicable"
meta$`collection date`[which(meta$date == "unknown")] = "not recorded"
meta$`collection date`[which(meta$`Sample Name` == "negoro35A01")] = "not applicable"
## fill in remaining attributes
meta$`Sample title` <- ""
meta$`BioProject Accession` <- "PRJNA518082"
meta$Organism <- "not collected"
meta$`isolation source` <- "feces metagenome"
meta$`latitude and longitude` <- "not collected"
meta$host <- ""
meta$Isolate <- meta$`Sample Name`
meta$`geographic location` <- ""
## replace existing sitecode with full description to match their geographic location term
meta$`geographic location`[which(meta$sitecode=="HOP")] = "USA: Hopkinton NH"
meta$`geographic location`[which(meta$sitecode=="ACA")] = "USA: Acadia National Park ME"
meta$`geographic location`[which(meta$sitecode=="YRK")] = "USA: Yorktown Naval Weapons Station VA"
meta$`geographic location`[which(meta$sitecode=="ELY")] = "USA: Ely Mine VT"
meta$`geographic location`[which(meta$sitecode=="BRN")] = "USA: Brown Lane Hollis NH"
meta$`geographic location`[which(meta$sitecode=="MAP")] = "USA: Maple Hill Hollis NH"
meta$`geographic location`[which(meta$sitecode=="ROL")] = "USA: Rollinsford NH"
meta$`geographic location`[which(meta$sitecode=="PEN")] = "USA: Penacook NH"
meta$`geographic location`[which(meta$sitecode=="EPS")] = "USA: Epsom NH"
meta$`geographic location`[which(meta$sitecode=="CNB")] = "USA: Canterbury NH"
meta$`geographic location`[which(meta$sitecode=="GIL")] = "USA: Gilsum NH"
meta$`geographic location`[which(meta$sitecode=="HOL")] = "USA: Holderness NH"
meta$`geographic location`[which(meta$sitecode=="CHI")] = "USA: Chichester NH"
meta$`geographic location`[which(meta$sitecode=="MAS")] = "USA: Massabesic NH"
meta$`geographic location`[which(meta$sitecode=="FOX")] = "USA: Fox State Forest NH"
meta$`geographic location`[which(meta$sitecode=="FAR")] = "USA: Fairfield ME"
meta$`geographic location`[which(meta$sitecode=="MTV")] = "USA: Mount Vernon NH"
meta$`geographic location`[which(meta$sitecode=="ALS")] = "USA: Alstead NH"
meta$`geographic location`[which(meta$`Sample type` == "mock")] = "not applicable"
meta$`geographic location`[which(meta$`Sample type` == "ncontrol")] = "not applicable"
## substitute Library codes to match figures in paper:
meta$Library[which(meta$Library == "4.1")] = "libA"
meta$Library[which(meta$Library == "4.2")] = "libB"
meta$Library[which(meta$Library == "7.1")] = "libC"
meta$Library[which(meta$Library == "7.2")] = "libD"
## reorder to match SRA template column order
meta_attributes <- meta[,c(1,7:9,12,10,6,14,11,3,2,13)]
## write per-Library records to disk:
attributes_libA <- meta_attributes %>% filter(Library=="libA")
attributes_libB <- meta_attributes %>% filter(Library=="libB")
attributes_libC <- meta_attributes %>% filter(Library=="libC")
attributes_libD <- meta_attributes %>% filter(Library=="libD")
attributes_libA$Library <- NULL
attributes_libB$Library <- NULL
attributes_libC <- meta_attributes %>% filter(Library=="libC")
attributes_libC$Library <- NULL
attributes_libD$Library <- NULL
write.table(attributes_libA, file="~/Repos/tidybug/SRAsubmission/libA_attributes.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(attributes_libB, file="~/Repos/tidybug/SRAsubmission/libB_attributes.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(attributes_libC, file="~/Repos/tidybug/SRAsubmission/libC_attributes.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(attributes_libD, file="~/Repos/tidybug/SRAsubmission/libD_attributes.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
## Create additional fields for second SRA 'metadata' submission:
meta$Title <- "COI amplicons from bat guano"
meta$`Library strategy` <- 'AMPLICON'
meta$`Library source` <- 'METAGENOMIC'
meta$`Library selection` <- 'PCR'
meta$`Library layout` <- 'PAIRED'
meta$Platform <- 'ILLUMINA'
meta$`Instrument model` <- 'Illumina MiSeq'
meta$`Design description` <- 'COI amplicons generated from ANML primer pair'
meta$Filetype <- 'fastq'
meta$`Reference assembly` <- ""
meta <- merge(meta, pall_wide)
## select needed columns:
meta_library<- meta[,c(8,1,1,15:26, 2)]
colnames(meta_library)[3] <- "Library ID"
library_libA <- meta_library %>% filter(Library == "libA")
library_libB <- meta_library %>% filter(Library == "libB")
library_libC <- meta_library %>% filter(Library == "libC")
library_libD <- meta_library %>% filter(Library == "libD")
write.table(library_libA, file="~/Repos/tidybug/SRAsubmission/libA_librarymeta.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(library_libB, file="~/Repos/tidybug/SRAsubmission/libB_librarymeta.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(library_libC, file="~/Repos/tidybug/SRAsubmission/libC_librarymeta.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(library_libD, file="~/Repos/tidybug/SRAsubmission/libD_librarymeta.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
View(meta_library)
meta <- read_delim('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/clean_metadata.txt', delim = "\t")
meta <- meta[,c(5,6,11,14:15)]
colnames(meta) <- c("Sample Name", "Library", "Sample type", "sitecode", "date")
## read in manifest files of used data and identify samples in meta that generated sequence data
p41 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p41.manifest.file')
p42 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p42.manifest.file')
p71 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p71.manifest.file')
p72 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p72.manifest.file')
pall <- rbind(p41, p42, p71, p72)
colnames(pall) <- c("Sample Name", "filepath", "direction")
samplemeta <- intersect(meta$`Sample Name`, pall$`Sample Name`)
meta <- meta %>% filter(`Sample Name`%in% samplemeta)
rm(p41, p42, p71, p72, samplemeta)
pall <- separate(pall, col = filepath, into = c("tmp1", "tmp2", "tmp3", "tmp4", "tmp5", "tmp6", "tmp7", "tmp8", "tmp9", "filepath"), sep = "\\/")
pall <- pall[,c(1,11:12)]
## reshape the `pall` file from long to wide (each SampleName has two columns, one for each path to files)
pall_wide <- dcast(pall, `Sample Name` ~ direction, value.var = "filepath")
rm(pall)
colnames(pall_wide) <- c("Sample Name", "Filename", "filename2")
## overwrite new $Date and $WOY columns with lubridate package to ensure we're selecting a consistent WOY
meta$`collection date` <- as.character(lubridate::mdy(meta$date))
## any samples we'd be discarding or are NA are converted to generic date
meta$`collection date`[which(meta$`Sample type` == "ncontrol")] = "not applicable"
meta$`collection date`[which(meta$`Sample type` == "mock")] = "not applicable"
meta$`collection date`[which(meta$date == "unknown")] = "not recorded"
meta$`collection date`[which(meta$`Sample Name` == "negoro35A01")] = "not applicable"
## fill in remaining attributes
meta$`Sample title` <- ""
meta$`BioProject Accession` <- "PRJNA518082"
meta$Organism <- "not collected"
meta$`isolation source` <- "feces metagenome"
meta$`latitude and longitude` <- "not collected"
meta$host <- ""
meta$Isolate <- meta$`Sample Name`
meta$`geographic location` <- ""
## replace existing sitecode with full description to match their geographic location term
meta$`geographic location`[which(meta$sitecode=="HOP")] = "USA: Hopkinton NH"
meta$`geographic location`[which(meta$sitecode=="ACA")] = "USA: Acadia National Park ME"
meta$`geographic location`[which(meta$sitecode=="YRK")] = "USA: Yorktown Naval Weapons Station VA"
meta$`geographic location`[which(meta$sitecode=="ELY")] = "USA: Ely Mine VT"
meta$`geographic location`[which(meta$sitecode=="BRN")] = "USA: Brown Lane Hollis NH"
meta$`geographic location`[which(meta$sitecode=="MAP")] = "USA: Maple Hill Hollis NH"
meta$`geographic location`[which(meta$sitecode=="ROL")] = "USA: Rollinsford NH"
meta$`geographic location`[which(meta$sitecode=="PEN")] = "USA: Penacook NH"
meta$`geographic location`[which(meta$sitecode=="EPS")] = "USA: Epsom NH"
meta$`geographic location`[which(meta$sitecode=="CNB")] = "USA: Canterbury NH"
meta$`geographic location`[which(meta$sitecode=="GIL")] = "USA: Gilsum NH"
meta$`geographic location`[which(meta$sitecode=="HOL")] = "USA: Holderness NH"
meta$`geographic location`[which(meta$sitecode=="CHI")] = "USA: Chichester NH"
meta$`geographic location`[which(meta$sitecode=="MAS")] = "USA: Massabesic NH"
meta$`geographic location`[which(meta$sitecode=="FOX")] = "USA: Fox State Forest NH"
meta$`geographic location`[which(meta$sitecode=="FAR")] = "USA: Fairfield ME"
meta$`geographic location`[which(meta$sitecode=="MTV")] = "USA: Mount Vernon NH"
meta$`geographic location`[which(meta$sitecode=="ALS")] = "USA: Alstead NH"
meta$`geographic location`[which(meta$`Sample type` == "mock")] = "not applicable"
meta$`geographic location`[which(meta$`Sample type` == "ncontrol")] = "not applicable"
## substitute Library codes to match figures in paper:
meta$Library[which(meta$Library == "4.1")] = "libA"
meta$Library[which(meta$Library == "4.2")] = "libB"
meta$Library[which(meta$Library == "7.1")] = "libC"
meta$Library[which(meta$Library == "7.2")] = "libD"
## reorder to match SRA template column order
meta_attributes <- meta[,c(1,7:9,12,10,6,14,11,3,2,13)]
## write per-Library records to disk:
attributes_libA <- meta_attributes %>% filter(Library=="libA")
attributes_libA$Library <- NULL
attributes_libB <- meta_attributes %>% filter(Library=="libB")
attributes_libB$Library <- NULL
attributes_libC <- meta_attributes %>% filter(Library=="libC")
attributes_libC$Library <- NULL
attributes_libD <- meta_attributes %>% filter(Library=="libD")
attributes_libD$Library <- NULL
write.table(attributes_libA, file="~/Repos/tidybug/SRAsubmission/libA_attributes.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(attributes_libB, file="~/Repos/tidybug/SRAsubmission/libB_attributes.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(attributes_libC, file="~/Repos/tidybug/SRAsubmission/libC_attributes.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(attributes_libD, file="~/Repos/tidybug/SRAsubmission/libD_attributes.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
## Create additional fields for second SRA 'metadata' submission:
meta$Title <- "COI amplicons from bat guano"
meta$`Library strategy` <- 'AMPLICON'
meta$`Library source` <- 'METAGENOMIC'
meta$`Library selection` <- 'PCR'
meta$`Library layout` <- 'PAIRED'
meta$Platform <- 'ILLUMINA'
meta$`Instrument model` <- 'Illumina MiSeq'
meta$`Design description` <- 'COI amplicons generated from ANML primer pair'
meta$Filetype <- 'fastq'
meta$`Reference assembly` <- ""
meta <- merge(meta, pall_wide)
## select needed columns:
meta_library<- meta[,c(8,1,1,15:26, 2)]
colnames(meta_library) <- c("bioproject_accession", "sample_name", "library_ID", "title", "library_strategy",
"library_source", "library_selection", "library_layout", "platform", "instrument_model",
"design_description", "filetype", "filename", "filename2", "Library")
meta <- read_delim('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/clean_metadata.txt', delim = "\t")
meta <- meta[,c(5,6,11,14:15)]
colnames(meta) <- c("Sample Name", "Library", "Sample type", "sitecode", "date")
## read in manifest files of used data and identify samples in meta that generated sequence data
p41 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p41.manifest.file')
p42 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p42.manifest.file')
p71 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p71.manifest.file')
p72 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p72.manifest.file')
pall <- rbind(p41, p42, p71, p72)
colnames(pall) <- c("Sample Name", "filepath", "direction")
samplemeta <- intersect(meta$`Sample Name`, pall$`Sample Name`)
meta <- meta %>% filter(`Sample Name`%in% samplemeta)
rm(p41, p42, p71, p72, samplemeta)
pall <- separate(pall, col = filepath, into = c("tmp1", "tmp2", "tmp3", "tmp4", "tmp5", "tmp6", "tmp7", "tmp8", "tmp9", "filepath"), sep = "\\/")
pall <- pall[,c(1,11:12)]
## reshape the `pall` file from long to wide (each SampleName has two columns, one for each path to files)
pall_wide <- dcast(pall, `Sample Name` ~ direction, value.var = "filepath")
rm(pall)
colnames(pall_wide) <- c("Sample Name", "Filename", "filename2")
## overwrite new $Date and $WOY columns with lubridate package to ensure we're selecting a consistent WOY
meta$`collection date` <- as.character(lubridate::mdy(meta$date))
## any samples we'd be discarding or are NA are converted to generic date
meta$`collection date`[which(meta$`Sample type` == "ncontrol")] = "not applicable"
meta$`collection date`[which(meta$`Sample type` == "mock")] = "not applicable"
meta$`collection date`[which(meta$date == "unknown")] = "not recorded"
meta$`collection date`[which(meta$`Sample Name` == "negoro35A01")] = "not applicable"
## fill in remaining attributes
meta$`Sample title` <- ""
meta$`BioProject Accession` <- "PRJNA518082"
meta$Organism <- "not collected"
meta$`isolation source` <- "feces metagenome"
meta$`latitude and longitude` <- "not collected"
meta$host <- ""
meta$Isolate <- meta$`Sample Name`
meta$`geographic location` <- ""
## replace existing sitecode with full description to match their geographic location term
meta$`geographic location`[which(meta$sitecode=="HOP")] = "USA: Hopkinton NH"
meta$`geographic location`[which(meta$sitecode=="ACA")] = "USA: Acadia National Park ME"
meta$`geographic location`[which(meta$sitecode=="YRK")] = "USA: Yorktown Naval Weapons Station VA"
meta$`geographic location`[which(meta$sitecode=="ELY")] = "USA: Ely Mine VT"
meta$`geographic location`[which(meta$sitecode=="BRN")] = "USA: Brown Lane Hollis NH"
meta$`geographic location`[which(meta$sitecode=="MAP")] = "USA: Maple Hill Hollis NH"
meta$`geographic location`[which(meta$sitecode=="ROL")] = "USA: Rollinsford NH"
meta$`geographic location`[which(meta$sitecode=="PEN")] = "USA: Penacook NH"
meta$`geographic location`[which(meta$sitecode=="EPS")] = "USA: Epsom NH"
meta$`geographic location`[which(meta$sitecode=="CNB")] = "USA: Canterbury NH"
meta$`geographic location`[which(meta$sitecode=="GIL")] = "USA: Gilsum NH"
meta$`geographic location`[which(meta$sitecode=="HOL")] = "USA: Holderness NH"
meta$`geographic location`[which(meta$sitecode=="CHI")] = "USA: Chichester NH"
meta$`geographic location`[which(meta$sitecode=="MAS")] = "USA: Massabesic NH"
meta$`geographic location`[which(meta$sitecode=="FOX")] = "USA: Fox State Forest NH"
meta$`geographic location`[which(meta$sitecode=="FAR")] = "USA: Fairfield ME"
meta$`geographic location`[which(meta$sitecode=="MTV")] = "USA: Mount Vernon NH"
meta$`geographic location`[which(meta$sitecode=="ALS")] = "USA: Alstead NH"
meta$`geographic location`[which(meta$`Sample type` == "mock")] = "not applicable"
meta$`geographic location`[which(meta$`Sample type` == "ncontrol")] = "not applicable"
## substitute Library codes to match figures in paper:
meta$Library[which(meta$Library == "4.1")] = "libA"
meta$Library[which(meta$Library == "4.2")] = "libB"
meta$Library[which(meta$Library == "7.1")] = "libC"
meta$Library[which(meta$Library == "7.2")] = "libD"
## reorder to match SRA template column order
meta_attributes <- meta[,c(1,7:9,12,10,6,14,11,3,2,13)]
## write per-Library records to disk:
attributes_libA <- meta_attributes %>% filter(Library=="libA")
attributes_libA$Library <- NULL
attributes_libB <- meta_attributes %>% filter(Library=="libB")
attributes_libB$Library <- NULL
attributes_libC <- meta_attributes %>% filter(Library=="libC")
attributes_libC$Library <- NULL
attributes_libD <- meta_attributes %>% filter(Library=="libD")
attributes_libD$Library <- NULL
write.table(attributes_libA, file="~/Repos/tidybug/SRAsubmission/libA_attributes.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(attributes_libB, file="~/Repos/tidybug/SRAsubmission/libB_attributes.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(attributes_libC, file="~/Repos/tidybug/SRAsubmission/libC_attributes.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(attributes_libD, file="~/Repos/tidybug/SRAsubmission/libD_attributes.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
## Create additional fields for second SRA 'metadata' submission:
meta$Title <- "COI amplicons from bat guano"
meta$`Library strategy` <- 'AMPLICON'
meta$`Library source` <- 'METAGENOMIC'
meta$`Library selection` <- 'PCR'
meta$`Library layout` <- 'PAIRED'
meta$Platform <- 'ILLUMINA'
meta$`Instrument model` <- 'Illumina MiSeq'
meta$`Design description` <- 'COI amplicons generated from ANML primer pair'
meta$Filetype <- 'fastq'
meta <- merge(meta, pall_wide)
## select needed columns:
meta_library<- meta[,c(8,1,1,15:26, 2)]
View(meta)
## select needed columns:
meta_library<- meta[,c(8,1,1,15:25, 2)]
View(meta_library)
colnames(meta_library) <- c("bioproject_accession", "sample_name", "library_ID", "title", "library_strategy",
"library_source", "library_selection", "library_layout", "platform", "instrument_model",
"design_description", "filetype", "filename", "filename2", "Library")
library_libA <- meta_library %>% filter(Library == "libA")
library_libB <- meta_library %>% filter(Library == "libB")
library_libC <- meta_library %>% filter(Library == "libC")
library_libD <- meta_library %>% filter(Library == "libD")
write.table(library_libA, file="~/Repos/tidybug/SRAsubmission/libA_librarymeta.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(library_libB, file="~/Repos/tidybug/SRAsubmission/libB_librarymeta.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(library_libC, file="~/Repos/tidybug/SRAsubmission/libC_librarymeta.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(library_libD, file="~/Repos/tidybug/SRAsubmission/libD_librarymeta.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
meta <- read_delim('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/clean_metadata.txt', delim = "\t")
meta <- meta[,c(5,6,11,14:15)]
colnames(meta) <- c("Sample Name", "Library", "Sample type", "sitecode", "date")
## read in manifest files of used data and identify samples in meta that generated sequence data
p41 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p41.manifest.file')
p42 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p42.manifest.file')
p71 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p71.manifest.file')
p72 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p72.manifest.file')
pall <- rbind(p41, p42, p71, p72)
colnames(pall) <- c("Sample Name", "filepath", "direction")
samplemeta <- intersect(meta$`Sample Name`, pall$`Sample Name`)
meta <- meta %>% filter(`Sample Name`%in% samplemeta)
rm(p41, p42, p71, p72, samplemeta)
pall <- separate(pall, col = filepath, into = c("tmp1", "tmp2", "tmp3", "tmp4", "tmp5", "tmp6", "tmp7", "tmp8", "tmp9", "filepath"), sep = "\\/")
pall <- pall[,c(1,11:12)]
## reshape the `pall` file from long to wide (each SampleName has two columns, one for each path to files)
pall_wide <- dcast(pall, `Sample Name` ~ direction, value.var = "filepath")
rm(pall)
colnames(pall_wide) <- c("Sample Name", "Filename", "filename2")
## overwrite new $Date and $WOY columns with lubridate package to ensure we're selecting a consistent WOY
meta$`collection date` <- as.character(lubridate::mdy(meta$date))
## any samples we'd be discarding or are NA are converted to generic date
meta$`collection date`[which(meta$`Sample type` == "ncontrol")] = "not applicable"
meta$`collection date`[which(meta$`Sample type` == "mock")] = "not applicable"
meta$`collection date`[which(meta$date == "unknown")] = "not recorded"
meta$`collection date`[which(meta$`Sample Name` == "negoro35A01")] = "not applicable"
View(meta)
## overwrite new $Date and $WOY columns with lubridate package to ensure we're selecting a consistent WOY
meta$`collection date` <- as.character(lubridate::mdy(meta$date))
meta <- read_delim('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/clean_metadata.txt', delim = "\t")
meta <- meta[,c(5,6,11,14:15)]
colnames(meta) <- c("Sample Name", "Library", "Sample type", "sitecode", "date")
## read in manifest files of used data and identify samples in meta that generated sequence data
p41 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p41.manifest.file')
p42 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p42.manifest.file')
p71 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p71.manifest.file')
p72 <- read_csv('https://github.com/devonorourke/tidybug/raw/master/SRAsubmission/p72.manifest.file')
pall <- rbind(p41, p42, p71, p72)
colnames(pall) <- c("Sample Name", "filepath", "direction")
samplemeta <- intersect(meta$`Sample Name`, pall$`Sample Name`)
meta <- meta %>% filter(`Sample Name`%in% samplemeta)
rm(p41, p42, p71, p72, samplemeta)
pall <- separate(pall, col = filepath, into = c("tmp1", "tmp2", "tmp3", "tmp4", "tmp5", "tmp6", "tmp7", "tmp8", "tmp9", "filepath"), sep = "\\/")
pall <- pall[,c(1,11:12)]
## reshape the `pall` file from long to wide (each SampleName has two columns, one for each path to files)
pall_wide <- dcast(pall, `Sample Name` ~ direction, value.var = "filepath")
rm(pall)
colnames(pall_wide) <- c("Sample Name", "Filename", "filename2")
## overwrite new $Date and $WOY columns with lubridate package to ensure we're selecting a consistent WOY
meta$`collection date` <- as.character(lubridate::mdy(meta$date))
## any samples we'd be discarding or are NA are converted to generic date
meta$`collection date`[which(meta$`Sample type` == "ncontrol")] = "not applicable"
meta$`collection date`[which(meta$`Sample type` == "mock")] = "not applicable"
meta$`collection date`[which(meta$date == "unknown")] = "not recorded"
meta$`collection date`[which(meta$`Sample Name` == "negoro35A01")] = "not applicable"
## fill in remaining attributes
meta$`Sample title` <- ""
meta$`BioProject Accession` <- "PRJNA518082"
meta$Organism <- "not collected"
meta$`isolation source` <- "feces metagenome"
meta$`latitude and longitude` <- "not collected"
meta$host <- ""
meta$Isolate <- meta$`Sample Name`
meta$`geographic location` <- ""
meta$`geographic location`[which(meta$sitecode=="HOP")] = "USA: Hopkinton NH"
meta$`geographic location`[which(meta$sitecode=="ACA")] = "USA: Acadia National Park ME"
meta$`geographic location`[which(meta$sitecode=="YRK")] = "USA: Yorktown Naval Weapons Station VA"
meta$`geographic location`[which(meta$sitecode=="ELY")] = "USA: Ely Mine VT"
meta$`geographic location`[which(meta$sitecode=="BRN")] = "USA: Brown Lane Hollis NH"
meta$`geographic location`[which(meta$sitecode=="MAP")] = "USA: Maple Hill Hollis NH"
meta$`geographic location`[which(meta$sitecode=="ROL")] = "USA: Rollinsford NH"
meta$`geographic location`[which(meta$sitecode=="PEN")] = "USA: Penacook NH"
meta$`geographic location`[which(meta$sitecode=="EPS")] = "USA: Epsom NH"
meta$`geographic location`[which(meta$sitecode=="CNB")] = "USA: Canterbury NH"
meta$`geographic location`[which(meta$sitecode=="GIL")] = "USA: Gilsum NH"
meta$`geographic location`[which(meta$sitecode=="HOL")] = "USA: Holderness NH"
meta$`geographic location`[which(meta$sitecode=="CHI")] = "USA: Chichester NH"
meta$`geographic location`[which(meta$sitecode=="MAS")] = "USA: Massabesic NH"
meta$`geographic location`[which(meta$sitecode=="FOX")] = "USA: Fox State Forest NH"
meta$`geographic location`[which(meta$sitecode=="FAR")] = "USA: Fairfield ME"
meta$`geographic location`[which(meta$sitecode=="MTV")] = "USA: Mount Vernon NH"
meta$`geographic location`[which(meta$sitecode=="ALS")] = "USA: Alstead NH"
meta$`geographic location`[which(meta$`Sample type` == "mock")] = "not applicable"
meta$`geographic location`[which(meta$`Sample type` == "ncontrol")] = "not applicable"
meta$`geographic location`[which(meta$`Sample Name` == "negoro35A01")] = "not applicable"
## substitute Library codes to match figures in paper:
meta$Library[which(meta$Library == "4.1")] = "libA"
meta$Library[which(meta$Library == "4.2")] = "libB"
meta$Library[which(meta$Library == "7.1")] = "libC"
meta$Library[which(meta$Library == "7.2")] = "libD"
## reorder to match SRA template column order
meta_attributes <- meta[,c(1,7:9,12,10,6,14,11,3,2,13)]
attributes_libA <- meta_attributes %>% filter(Library=="libA")
attributes_libA$Library <- NULL
attributes_libB <- meta_attributes %>% filter(Library=="libB")
attributes_libB$Library <- NULL
attributes_libC <- meta_attributes %>% filter(Library=="libC")
attributes_libC$Library <- NULL
attributes_libD <- meta_attributes %>% filter(Library=="libD")
attributes_libD$Library <- NULL
write.table(attributes_libA, file="~/Repos/tidybug/SRAsubmission/libA_attributes.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(attributes_libB, file="~/Repos/tidybug/SRAsubmission/libB_attributes.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(attributes_libC, file="~/Repos/tidybug/SRAsubmission/libC_attributes.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(attributes_libD, file="~/Repos/tidybug/SRAsubmission/libD_attributes.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
## Create additional fields for second SRA 'metadata' submission:
meta$Title <- "COI amplicons from bat guano"
meta$`Library strategy` <- 'AMPLICON'
meta$`Library source` <- 'METAGENOMIC'
meta$`Library selection` <- 'PCR'
meta$`Library layout` <- 'PAIRED'
meta$Platform <- 'ILLUMINA'
meta$`Instrument model` <- 'Illumina MiSeq'
meta$`Design description` <- 'COI amplicons generated from ANML primer pair'
meta$Filetype <- 'fastq'
meta <- merge(meta, pall_wide)
## select needed columns:
meta_library<- meta[,c(8,1,1,15:25, 2)]
colnames(meta_library) <- c("bioproject_accession", "sample_name", "library_ID", "title", "library_strategy",
"library_source", "library_selection", "library_layout", "platform", "instrument_model",
"design_description", "filetype", "filename", "filename2", "Library")
library_libA <- meta_library %>% filter(Library == "libA")
library_libB <- meta_library %>% filter(Library == "libB")
library_libC <- meta_library %>% filter(Library == "libC")
library_libD <- meta_library %>% filter(Library == "libD")
write.table(library_libA, file="~/Repos/tidybug/SRAsubmission/libA_librarymeta.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(library_libB, file="~/Repos/tidybug/SRAsubmission/libB_librarymeta.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(library_libC, file="~/Repos/tidybug/SRAsubmission/libC_librarymeta.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(library_libD, file="~/Repos/tidybug/SRAsubmission/libD_librarymeta.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
View(library_libB)
View(attributes_libB)
library_libA$biosample_accession <- "SUB5131058"
library_libB$biosample_accession <- "SUB5131058"
library_libB$sample_name <- NULL
library_libC$biosample_accession <- "SUB5131060"
library_libD$biosample_accession <- "SUB5131070"
write.table(library_libB, file="~/Repos/tidybug/SRAsubmission/libB_librarymeta.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(library_libC, file="~/Repos/tidybug/SRAsubmission/libC_librarymeta.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
write.table(library_libD, file="~/Repos/tidybug/SRAsubmission/libD_librarymeta.tsv", quote=FALSE, row.names = FALSE, sep = "\t")
