View(test)
tmp1 <- corsummary.function(u.q0.dunn.guano, qtype="q=0", raretype="unrarefied")
tmp2 <- corsummary.function(r.q0.dunn.guano, qtype="q=0", raretype="rarefied")
tmp3 <- corsummary.function(u.q1.dunn.guano, qtype="q=1", raretype="unrarefied")
tmp4 <- corsummary.function(r.q1.dunn.guano, qtype="q=1", raretype="rarefied")
tmp5 <- corsummary.function(u.q2.dunn.guano, qtype="q=2", raretype="unrarefied")
tmp6 <- corsummary.function(r.q2.dunn.guano, qtype="q=2", raretype="rarefied")
all.guano.dunn <- rbind(tmp1, tmp2, tmp3, tmp4, tmp5, tmp6)
head(all.guano.dunn)
all.guano.dunn %>% group_by(Hill_qval, Rare_type) %>% filter(pval <= 0.05) %>% summarise(counts=n())
## Summarizing Dunn comparisons a few different ways
## function to generate comparisons
corsummary.function <- function(data, qtype, raretype) {
tmp <- data
colnames(tmp) <- c("Group1", "Group2", "pval", "ignore")
tmp <- separate(tmp, col=Group1, into=c("Method1", "Filt1", "Lib1"), sep="-")
tmp$Hill_qval <- qtype
tmp$Rare_type <- raretype
tmp
}
tmp1 <- corsummary.function(u.q0.dunn.guano, qtype="q=0", raretype="unrarefied")
tmp2 <- corsummary.function(r.q0.dunn.guano, qtype="q=0", raretype="rarefied")
tmp3 <- corsummary.function(u.q1.dunn.guano, qtype="q=1", raretype="unrarefied")
tmp4 <- corsummary.function(r.q1.dunn.guano, qtype="q=1", raretype="rarefied")
tmp5 <- corsummary.function(u.q2.dunn.guano, qtype="q=2", raretype="unrarefied")
tmp6 <- corsummary.function(r.q2.dunn.guano, qtype="q=2", raretype="rarefied")
all.guano.dunn <- rbind(tmp1, tmp2, tmp3, tmp4, tmp5, tmp6)
### How many significant differences for each Hill Number + RarefyType (note there are 630 non:self pairwise comparisons here...)
all.guano.dunn %>% group_by(Hill_qval, Rare_type) %>% filter(pval <= 0.05) %>% summarise(counts=n())
### How many significant differences for each Hill Number + RarefyType + FilterMethod?
all.guano.dunn %>% group_by(Hill_qval, Rare_type, Group1) %>% filter(pval <= 0.05) %>% summarise(counts=n())
View(all.guano.dunn)
### How many significant differences for each Hill Number + RarefyType + FilterMethod?
all.guano.dunn %>% group_by(Hill_qval, Rare_type, Method1) %>% filter(pval <= 0.05) %>% summarise(counts=n())
### How many significant differences for each Hill Number + RarefyType (note there are 630 non:self pairwise comparisons here...)
table.HillNum_by_RareType <- all.guano.dunn %>% group_by(Hill_qval, Rare_type) %>% filter(pval <= 0.05) %>% summarise(counts=n())
### How many significant differences for each Hill Number + RarefyType + FilterMethod?
table.HillNumb_by_RareType_and_Method <- all.guano.dunn %>% group_by(Hill_qval, Rare_type, Method1) %>% filter(pval <= 0.05) %>% summarise(counts=n())
630/3
View(table.HillNumb_by_RareType_and_Method)
?spread
spread(table.HillNumb_by_RareType_and_Method, key = Method1, value = counts)
all.guano.dunn %>% group_by(Hill_qval, Rare_type) %>% filter(pval <= 0.05) %>% summarise(counts=n())
View(all.guano.dunn)
all.guano.dunn %>% group_by(Hill_qval, Rare_type, Method1) %>% summarise(counts=n())
## Summarizing Dunn comparisons a few different ways
## function to generate comparisons
corsummary.function <- function(data, qtype, raretype) {
tmp <- data
colnames(tmp) <- c("Group1", "Group2", "pval", "ignore")
tmp <- separate(tmp, col=Group1, into=c("Method1", "Filt1", "Lib1"), sep="-")
tmp <- separate(tmp, col=Group2, into=c("Method2", "Filt2", "Lib2"), sep="-")
tmp$Hill_qval <- qtype
tmp$Rare_type <- raretype
tmp
}
tmp1 <- corsummary.function(u.q0.dunn.guano, qtype="q=0", raretype="unrarefied")
tmp2 <- corsummary.function(r.q0.dunn.guano, qtype="q=0", raretype="rarefied")
tmp3 <- corsummary.function(u.q1.dunn.guano, qtype="q=1", raretype="unrarefied")
tmp4 <- corsummary.function(r.q1.dunn.guano, qtype="q=1", raretype="rarefied")
tmp5 <- corsummary.function(u.q2.dunn.guano, qtype="q=2", raretype="unrarefied")
tmp6 <- corsummary.function(r.q2.dunn.guano, qtype="q=2", raretype="rarefied")
all.guano.dunn <- rbind(tmp1, tmp2, tmp3, tmp4, tmp5, tmp6)
all.guano.dunn %>% group_by(Hill_qval, Rare_type, Method1, Method2) %>% summarise(counts=n())
all.guano.dunn %>% group_by(Hill_qval, Rare_type) %>% filter(pval <= 0.05) %>% summarise(counts=n())
all.guano.dunn %>% group_by(Hill_qval, Rare_type) %>% summarise(counts=n())
all.guano.dunn %>% group_by(Hill_qval, Rare_type, Method1) %>% summarise(counts=n())
all.guano.dunn %>% group_by(Hill_qval, Rare_type, Method1, Method2) %>% summarise(counts=n())
all.guano.dunn %>% group_by(Hill_qval, Rare_type, Method2) %>% summarise(counts=n())
78*2
78*3
78*4
78*5
all.guano.dunn %>% group_by(Hill_qval, Rare_type, Method1, Method2) %>% summarise(counts=n())
all.guano.dunn %>% filter(Method1=="dada2") %>% group_by(Hill_qval, Rare_type, Method1, Method2) %>% summarise(counts=n())
144+78
all.guano.dunn %>% filter(Method1=="dada2") %>% group_by(Hill_qval, Rare_type, Method1, Method2) %>% summarise(counts=n())
all.guano.dunn %>% group_by(Hill_qval, Rare_type, Method1) %>% filter(pval <= 0.05) %>% summarise(counts=n())
all.guano.dunn %>% group_by(Hill_qval, Rare_type, Method1) %>% summarise(counts=n())
all.guano.dunn %>% group_by(Hill_qval, Rare_type, Method2) %>% summarise(counts=n())
tmp.table <- all.guano.dunn %>% group_by(Hill_qval, Rare_type, Method2) %>% summarise(counts=n())
View(tmp.table)
### How many significant differences for each Hill Number + RarefyType + FilterMethod? (there are 210 non:self pairwise comparisons per Method)
all.guano.dunn %>% filter(Method2=="dada2") %>% summarise(counts=n())
### How many significant differences for each Hill Number + RarefyType + FilterMethod? (there are 210 non:self pairwise comparisons per Method)
all.guano.dunn %>% filter(Method2=="dada2") %>% group_by(Hill_qval, Rare_type, Method1 %>% summarise(counts=n())
### How many significant differences for each Hill Number + RarefyType + FilterMethod? (there are 210 non:self pairwise comparisons per Method)
all.guano.dunn %>% filter(Method2=="dada2") %>% group_by(Hill_qval, Rare_type, Method1 %>% summarise(counts=n()
### How many significant differences for each Hill Number + RarefyType + FilterMethod? (there are 210 non:self pairwise comparisons per Method)
all.guano.dunn %>% filter(Method2=="dada2") %>% group_by(Hill_qval, Rare_type, Method1) %>% summarise(counts=n()
### How many significant differences for each Hill Number + RarefyType + FilterMethod? (there are 210 non:self pairwise comparisons per Method)
all.guano.dunn %>% filter(Method2=="dada2") %>% group_by(Hill_qval, Rare_type, Method1) %>% summarise(counts=n())
### How many significant differences for each Hill Number + RarefyType + FilterMethod? (there are 210 non:self pairwise comparisons per Method)
all.guano.dunn %>% filter(Method2=="dada2") %>% group_by(Hill_qval, Rare_type) %>% summarise(counts=n())
### How many significant differences for each Hill Number + RarefyType + FilterMethod? (there are 210 non:self pairwise comparisons per Method)
all.guano.dunn %>% filter(Method2=="dada2" & pval <= 0.05) %>% group_by(Hill_qval, Rare_type) %>% summarise(counts=n())
### How many significant differences for each Hill Number + RarefyType + FilterMethod? (there are 210 non:self pairwise comparisons per Method)
da.tmp <- all.guano.dunn %>% filter(Method2=="dada2" & pval <= 0.05) %>% group_by(Hill_qval, Rare_type) %>% summarise(counts=n())
vs.tmp <- all.guano.dunn %>% filter(Method1=="vsearch" & pval <= 0.05) %>% group_by(Hill_qval, Rare_type) %>% summarise(counts=n())
all.guano.dunn %>% filter(Method1=="vsearch" & pval <= 0.05) %>% group_by(Hill_qval, Rare_type) %>% summarise(counts=n())
da.tmp$Method <- "dada2"
vs.tmp$Method <- "vsearch"
nrow(da.tmp)
all.guano.dunn %>% filter(Method1=="vsearch") %>% group_by(Hill_qval, Rare_type) %>% summarise(counts=n())
366*6
2196*3
3196*2
View(u.q0.dunn.guano)
u.q0.dunn.guano %>% filter(grepl("vsearch", u.Group1))
nrow(u.q0.dunn.guano %>% filter(grepl("vsearch", u.Group1)))
nrow(all.guano.dunn %>% filter(grepl("vsearch", Method1) & grepl("vsearch", Method2)))
nrow(all.guano.dunn %>% filter(grepl("deblur", Method1) & grepl("deblur", Method2)))
nrow(all.guano.dunn %>% filter(grepl("deblur", Method1) | grepl("deblur", Method2)))
nrow(all.guano.dunn %>% filter(grepl("deblur", Method1) | grepl("deblur", Method2)))
nrow(all.guano.dunn %>% filter(grepl("dada2", Method1) | grepl("dada2", Method2)))
nrow(all.guano.dunn %>% filter(grepl("vsearch", Method1) | grepl("vsearch", Method2)))
nrow(all.guano.dunn %>% filter(grepl("deblur", Method1) | grepl("deblur", Method2))) %>% group_by(Hill_qval, Rare_type) %>% summarise(counts=n())
all.guano.dunn %>% filter(grepl("deblur", Method1) | grepl("deblur", Method2)) %>%
group_by(Hill_qval, Rare_type) %>%
summarise(counts=n())
all.guano.dunn %>% filter(grepl("deblur", Method1) | grepl("deblur", Method2)) %>%
filter(pval <= 0.05) %>%
group_by(Hill_qval, Rare_type) %>%
summarise(counts=n())
all.guano.dunn %>% filter(grepl("dada2", Method1) | grepl("dada2", Method2)) %>%
filter(pval <= 0.05) %>%
group_by(Hill_qval, Rare_type) %>%
summarise(counts=n())
all.guano.dunn %>% filter(grepl("vsearch", Method1) | grepl("vsearch", Method2)) %>%
filter(pval <= 0.05) %>%
group_by(Hill_qval, Rare_type) %>%
summarise(counts=n())
all.guano.dunn %>% filter(grepl("vsearch", Method1) | grepl("vsearch", Method2)) %>%
filter(pval <= 0.05) %>%
group_by(Hill_qval, Rare_type) %>%
summarise(counts=n()) %>%
mutate(Method="vsearch")
### How many significant differences for each Hill Number + RarefyType + FilterMethod? (there are 210 non:self pairwise comparisons per Method)
da.tmp <- all.guano.dunn %>% filter(grepl("dada2", Method1) | grepl("dada2", Method2)) %>%
filter(pval <= 0.05) %>%
group_by(Hill_qval, Rare_type) %>%
summarise(counts=n()) %>%
mutate(Method="dada2")
db.tmp <- all.guano.dunn %>% filter(grepl("deblur", Method1) | grepl("deblur", Method2)) %>%
filter(pval <= 0.05) %>%
group_by(Hill_qval, Rare_type) %>%
summarise(counts=n()) %>%
mutate(Method="deblur")
vs.tmp <- all.guano.dunn %>% filter(grepl("vsearch", Method1) | grepl("vsearch", Method2)) %>%
filter(pval <= 0.05) %>%
group_by(Hill_qval, Rare_type) %>%
summarise(counts=n()) %>%
mutate(Method="vsearch")
table.HillNumb_by_RareType_and_Method <- rbind(da.tmp, db.tmp, vs.tmp)
View(table.HillNumb_by_RareType_and_Method)
tmp.table <- rbind(da.tmp, db.tmp, vs.tmp)
table.HillNumb_by_RareType_and_Method <- spread(tmp.table, key = Method, value=counts)
spread(tmp.table, key = Method, value=counts)
spread(tmp.table, key = Hill_qval, value=counts)
View(table.HillNumb_by_RareType_and_Method)
rm(tmp1, tmp2, tmp3, tmp4, tmp5, tmp6)
rm(test, tmp.table)
rm(vs.tmp, da.tmp, db.tmp)
rm(df)
View(table.HillNum_by_RareType)
table.HillNum_by_RareType
## 3way anova, one per RarefyType and Hill Number
u.q0.anova <- aov(Hill_value ~ Library * Method * Filt, data=u.q0.hill.guano)
summary(u.q0.anova)
u.q1.anova <- aov(Hill_value ~ Library * Method * Filt, data=u.q1.hill.guano)
summary(u.q1.anova)
u.q2.anova <- aov(Hill_value ~ Library * Method * Filt, data=u.q2.hill.guano)
summary(u.q2.anova)
r.q0.anova <- aov(Hill_value ~ Library * Method * Filt, data=r.q0.hill.guano)
summary(r.q0.anova)
r.q1.anova <- aov(Hill_value ~ Library * Method * Filt, data=r.q1.hill.guano)
summary(r.q1.anova)
u.r2.anova <- aov(Hill_value ~ Library * Method * Filt, data=r.q2.hill.guano)
summary(r.q2.anova)
r.q2.anova <- aov(Hill_value ~ Library * Method * Filt, data=r.q2.hill.guano)
summary(r.q2.anova)
library(tidyverse)
library(reshape2)
library(vegan)
library(phyloseq)
## import data:
df <- read_csv("https://github.com/devonorourke/tidybug/raw/master/data/text_tables/all.filtmethods.df.csv.gz")
mock <- df %>% filter(SampleType=="mock")
rm(df)
## rename mock samples
mock$SeqID <- as.character(mock$SeqID)
mock$SeqID[which(mock$SeqID=="mockIM4p4L1")] <- "libA"
mock$SeqID[which(mock$SeqID=="mockIM4p4L2")] <- "libB"
mock$SeqID[which(mock$SeqID=="mockIM4p7L1")] <- "libC"
mock$SeqID[which(mock$SeqID=="mockIM4p7L2")] <- "libD"
betadist.function <- function(data, filter_exp, filter_exp2, betatest, binaryval) {
filter_exp_enq <- enquo(filter_exp)
filter_exp_enq2 <- enquo(filter_exp2)
tmp.df <- data %>% filter(!!filter_exp_enq) %>% filter(!!filter_exp_enq2)
Method <- tmp.df %>% distinct(Method)
Filt <- tmp.df %>% distinct(Filt)
BetaType <- binaryval
tmp.meta <- tmp.df %>% distinct(SeqID)
tmp.mat <- dcast(tmp.df, SeqID ~ HashID, value.var = "Reads", fill=0)
row.names(tmp.mat) <- tmp.mat$SeqID
SeqID <- row.names(tmp.mat)
tmp.mat$SeqID <- NULL
tmp.betadiv <- vegdist(tmp.mat, betatest, binary = binaryval)
tmp.dist <- data.frame(t(combn(rownames(tmp.mat),2)), as.numeric(tmp.betadiv))  ## pairwise distances
colnames(tmp.dist) <- c("SeqID1", "SeqID2", "betadistance")
tmp.out <- data.frame(tmp.dist, Method, Filt, BetaType)
tmp.out <- merge(tmp.out, tmp.meta, by.x = "SeqID1", by.y = "SeqID")
}
betadist.morisita.dada2.basic <- betadist.function(mock, Method=="dada2", Filt=="basic", "morisita", FALSE)
betadist.morisita.dada2.standard <- betadist.function(mock, Method=="dada2", Filt=="standard", "morisita", FALSE)
betadist.morisita.dada2.extra <- betadist.function(mock, Method=="dada2", Filt=="extra", "morisita", FALSE)
betadist.morisita.deblur.basic <- betadist.function(mock, Method=="deblur", Filt=="basic", "morisita", FALSE)
betadist.morisita.deblur.standard <- betadist.function(mock, Method=="deblur", Filt=="standard", "morisita", FALSE)
betadist.morisita.deblur.extra <- betadist.function(mock, Method=="deblur", Filt=="extra", "morisita", FALSE)
betadist.morisita.vsearch.basic <- betadist.function(mock, Method=="vsearch", Filt=="basic", "morisita", FALSE)
betadist.morisita.vsearch.standard <- betadist.function(mock, Method=="vsearch", Filt=="standard", "morisita", FALSE)
betadist.morisita.vsearch.extra <- betadist.function(mock, Method=="vsearch", Filt=="extra", "morisita", FALSE)
tmp1 <- rbind(betadist.morisita.dada2.basic, betadist.morisita.dada2.standard, betadist.morisita.dada2.extra, betadist.morisita.deblur.basic, betadist.morisita.deblur.standard, betadist.morisita.deblur.extra, betadist.morisita.vsearch.basic, betadist.morisita.vsearch.standard, betadist.morisita.vsearch.extra)
tmp1$BetaType[which(tmp1$BetaType==FALSE)] <- "morisita"
rm(list=ls(pattern = "betadist.morisita*"))
betadist.bray.dada2.basic <- betadist.function(mock, Method=="dada2", Filt=="basic", "bray", FALSE)
betadist.dice.dada2.basic <- betadist.function(mock, Method=="dada2", Filt=="basic", "bray", TRUE)
betadist.bray.dada2.standard <- betadist.function(mock, Method=="dada2", Filt=="standard", "bray", FALSE)
betadist.dice.dada2.standard <- betadist.function(mock, Method=="dada2", Filt=="standard", "bray", TRUE)
betadist.bray.dada2.extra <- betadist.function(mock, Method=="dada2", Filt=="extra", "bray", FALSE)
betadist.dice.dada2.extra <- betadist.function(mock, Method=="dada2", Filt=="extra", "bray", TRUE)
betadist.bray.deblur.basic <- betadist.function(mock, Method=="deblur", Filt=="basic", "bray", FALSE)
betadist.dice.deblur.basic <- betadist.function(mock, Method=="deblur", Filt=="basic", "bray", TRUE)
betadist.bray.deblur.standard <- betadist.function(mock, Method=="deblur", Filt=="standard", "bray", FALSE)
betadist.dice.deblur.standard <- betadist.function(mock, Method=="deblur", Filt=="standard", "bray", TRUE)
betadist.bray.deblur.extra <- betadist.function(mock, Method=="deblur", Filt=="extra", "bray", FALSE)
betadist.dice.deblur.extra <- betadist.function(mock, Method=="deblur", Filt=="extra", "bray", TRUE)
betadist.bray.vsearch.basic <- betadist.function(mock, Method=="vsearch", Filt=="basic", "bray", FALSE)
betadist.dice.vsearch.basic <- betadist.function(mock, Method=="vsearch", Filt=="basic", "bray", TRUE)
betadist.bray.vsearch.standard <- betadist.function(mock, Method=="vsearch", Filt=="standard", "bray", FALSE)
betadist.dice.vsearch.standard <- betadist.function(mock, Method=="vsearch", Filt=="standard", "bray", TRUE)
betadist.bray.vsearch.extra <- betadist.function(mock, Method=="vsearch", Filt=="extra", "bray", FALSE)
betadist.dice.vsearch.extra <- betadist.function(mock, Method=="vsearch", Filt=="extra", "bray", TRUE)
tmp2 <- rbind(betadist.dice.vsearch.extra, betadist.dice.vsearch.standard, betadist.dice.vsearch.basic,
betadist.bray.vsearch.extra, betadist.bray.vsearch.standard, betadist.bray.vsearch.basic,
betadist.dice.dada2.extra, betadist.dice.dada2.standard, betadist.dice.dada2.basic,
betadist.bray.dada2.extra, betadist.bray.dada2.standard, betadist.bray.dada2.basic,
betadist.dice.deblur.extra, betadist.dice.deblur.standard, betadist.dice.deblur.basic,
betadist.bray.deblur.extra, betadist.bray.deblur.standard, betadist.bray.deblur.basic)
rm(list=ls(pattern = "betadist.dice*"))
rm(list=ls(pattern = "betadist.bray*"))
tmp2$BetaType[which(tmp2$BetaType==FALSE)] <- "bray"
tmp2$BetaType[which(tmp2$BetaType==TRUE)] <- "dice"
tmp3 <- rbind(tmp1, tmp2)
rm(tmp1, tmp2)
tmp3$RareType <- "unrarefied"
########### and for rarefied data
rare.betadist.function <- function(data, filter_exp, filter_exp2, betatest, binaryval) {
filter_exp_enq <- enquo(filter_exp)
filter_exp_enq2 <- enquo(filter_exp2)
tmp.df <- data %>% filter(!!filter_exp_enq) %>% filter(!!filter_exp_enq2)
Method <- tmp.df %>% distinct(Method)
Filt <- tmp.df %>% distinct(Filt)
BetaType <- binaryval
tmp.meta <- tmp.df %>% distinct(SeqID)
tmp.mat <- dcast(tmp.df, SeqID ~ HashID, value.var = "Reads", fill=0)
row.names(tmp.mat) <- tmp.mat$SeqID
SeqID <- row.names(tmp.mat)
tmp.mat$SeqID <- NULL
tmp.mat2 <- rrarefy(tmp.mat, 5000)
tmp.betadiv <- vegdist(tmp.mat2, betatest, binary = binaryval)
tmp.dist <- data.frame(t(combn(rownames(tmp.mat2),2)), as.numeric(tmp.betadiv))  ## pairwise distances
colnames(tmp.dist) <- c("SeqID1", "SeqID2", "betadistance")
tmp.out <- data.frame(tmp.dist, Method, Filt, BetaType)
tmp.out <- merge(tmp.out, tmp.meta, by.x = "SeqID1", by.y = "SeqID")
}
betadist.morisita.dada2.basic <- rare.betadist.function(mock, Method=="dada2", Filt=="basic", "morisita", FALSE)
betadist.morisita.dada2.standard <- rare.betadist.function(mock, Method=="dada2", Filt=="standard", "morisita", FALSE)
betadist.morisita.dada2.extra <- rare.betadist.function(mock, Method=="dada2", Filt=="extra", "morisita", FALSE)
betadist.morisita.deblur.basic <- rare.betadist.function(mock, Method=="deblur", Filt=="basic", "morisita", FALSE)
betadist.morisita.deblur.standard <- rare.betadist.function(mock, Method=="deblur", Filt=="standard", "morisita", FALSE)
betadist.morisita.deblur.extra <- rare.betadist.function(mock, Method=="deblur", Filt=="extra", "morisita", FALSE)
betadist.morisita.vsearch.basic <- rare.betadist.function(mock, Method=="vsearch", Filt=="basic", "morisita", FALSE)
betadist.morisita.vsearch.standard <- rare.betadist.function(mock, Method=="vsearch", Filt=="standard", "morisita", FALSE)
betadist.morisita.vsearch.extra <- rare.betadist.function(mock, Method=="vsearch", Filt=="extra", "morisita", FALSE)
tmp1 <- rbind(betadist.morisita.dada2.basic, betadist.morisita.dada2.standard, betadist.morisita.dada2.extra, betadist.morisita.deblur.basic, betadist.morisita.deblur.standard, betadist.morisita.deblur.extra, betadist.morisita.vsearch.basic, betadist.morisita.vsearch.standard, betadist.morisita.vsearch.extra)
tmp1$BetaType[which(tmp1$BetaType==FALSE)] <- "morisita"
rm(list=ls(pattern = "betadist.morisita*"))
betadist.bray.dada2.basic <- rare.betadist.function(mock, Method=="dada2", Filt=="basic", "bray", FALSE)
betadist.dice.dada2.basic <- rare.betadist.function(mock, Method=="dada2", Filt=="basic", "bray", TRUE)
betadist.bray.dada2.standard <- rare.betadist.function(mock, Method=="dada2", Filt=="standard", "bray", FALSE)
betadist.dice.dada2.standard <- rare.betadist.function(mock, Method=="dada2", Filt=="standard", "bray", TRUE)
betadist.bray.dada2.extra <- rare.betadist.function(mock, Method=="dada2", Filt=="extra", "bray", FALSE)
betadist.dice.dada2.extra <- rare.betadist.function(mock, Method=="dada2", Filt=="extra", "bray", TRUE)
betadist.bray.deblur.basic <- rare.betadist.function(mock, Method=="deblur", Filt=="basic", "bray", FALSE)
betadist.dice.deblur.basic <- rare.betadist.function(mock, Method=="deblur", Filt=="basic", "bray", TRUE)
betadist.bray.deblur.standard <- rare.betadist.function(mock, Method=="deblur", Filt=="standard", "bray", FALSE)
betadist.dice.deblur.standard <- rare.betadist.function(mock, Method=="deblur", Filt=="standard", "bray", TRUE)
betadist.bray.deblur.extra <- rare.betadist.function(mock, Method=="deblur", Filt=="extra", "bray", FALSE)
betadist.dice.deblur.extra <- rare.betadist.function(mock, Method=="deblur", Filt=="extra", "bray", TRUE)
betadist.bray.vsearch.basic <- rare.betadist.function(mock, Method=="vsearch", Filt=="basic", "bray", FALSE)
betadist.dice.vsearch.basic <- rare.betadist.function(mock, Method=="vsearch", Filt=="basic", "bray", TRUE)
betadist.bray.vsearch.standard <- rare.betadist.function(mock, Method=="vsearch", Filt=="standard", "bray", FALSE)
betadist.dice.vsearch.standard <- rare.betadist.function(mock, Method=="vsearch", Filt=="standard", "bray", TRUE)
betadist.bray.vsearch.extra <- rare.betadist.function(mock, Method=="vsearch", Filt=="extra", "bray", FALSE)
betadist.dice.vsearch.extra <- rare.betadist.function(mock, Method=="vsearch", Filt=="extra", "bray", TRUE)
tmp2 <- rbind(betadist.dice.vsearch.extra, betadist.dice.vsearch.standard, betadist.dice.vsearch.basic,
betadist.bray.vsearch.extra, betadist.bray.vsearch.standard, betadist.bray.vsearch.basic,
betadist.dice.dada2.extra, betadist.dice.dada2.standard, betadist.dice.dada2.basic,
betadist.bray.dada2.extra, betadist.bray.dada2.standard, betadist.bray.dada2.basic,
betadist.dice.deblur.extra, betadist.dice.deblur.standard, betadist.dice.deblur.basic,
betadist.bray.deblur.extra, betadist.bray.deblur.standard, betadist.bray.deblur.basic)
rm(list=ls(pattern = "betadist.dice*"))
rm(list=ls(pattern = "betadist.bray*"))
tmp2$BetaType[which(tmp2$BetaType==FALSE)] <- "bray"
tmp2$BetaType[which(tmp2$BetaType==TRUE)] <- "dice"
tmp4 <- rbind(tmp1, tmp2)
rm(tmp1, tmp2)
tmp4$RareType <- "rarefied"
## merge rarefied and unrarefied data
all.betadist.df <- rbind(tmp3, tmp4)
rm(tmp3, tmp4)
## theme for plot
theme_devon <- function () {
theme_bw(base_size=12, base_family="Avenir") %+replace%
theme(
panel.background  = element_blank(),
plot.background = element_rect(fill="transparent", colour=NA),
legend.background = element_rect(fill="transparent", colour=NA),
legend.key = element_rect(fill="transparent", colour=NA)
)
}
## labeler for plots
all.betadist.df$LegendLabel <- paste(all.betadist.df$BetaType, all.betadist.df$Filt, sep=" - ")
## levels for plots
all.betadist.df$RareType <- factor(all.betadist.df$RareType, levels = c("unrarefied", "rarefied"))
all.betadist.df$Filt <- factor(all.betadist.df$Filt, levels = c("basic", "standard", "extra"))
all.betadist.df$LegendLabel <- factor(all.betadist.df$LegendLabel,
levels=c("dice - basic", "dice - standard", "dice - extra",
"bray - basic", "bray - standard", "bray - extra",
"morisita - basic", "morisita - standard", "morisita - extra"))
## color and shape sets:
pal3 <- rep(c('#9f9244', '#6c42b8', '#628a47'),4)
shape4 <- c(rep(15,3),rep(0,3),rep(2,3),rep(1,3))
## plot; save as 13_mock_betadist_boxplot; export at 800x800
#ggplot(all.betadist.df, aes(x=LegendLabel, y=betadistance, color=LegendLabel, shape=LegendLabel, label=pwiseID)) +
ggplot(all.betadist.df, aes(x=LegendLabel, y=betadistance, color=LegendLabel, shape=LegendLabel)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(alpha=0.7, position=position_jitterdodge(jitter.width = 0.2)) +
#geom_label_repel(data=all.betadist.df %>% filter(LegendLabel=="bray - standard" & betadistance == max.bray.standard), nudge_x = 0.8) +
#geom_label_repel(data=all.betadist.df %>% filter(LegendLabel=="dice - standard" & betadistance == max.dice.standard), nudge_x = 0.8) +
#geom_label_repel(data=all.betadist.df %>% filter(LegendLabel=="morisita - standard" & betadistance == max.morisita.standard), nudge_y = 0.2, nudge_x = 0.2) +
facet_grid( Method ~ RareType) +
scale_color_manual(values=pal3) +
scale_shape_manual(values=shape4) +
labs(title="", x="", y="distance", color="", shape="") +
theme_devon() +
theme(legend.position="none", axis.text.x = element_text(angle=22.5, hjust=1, size=9))
View(all.betadist.df)
## plot; save as 13_mock_betadist_boxplot; export at 800x800
#ggplot(all.betadist.df, aes(x=LegendLabel, y=betadistance, color=LegendLabel, shape=LegendLabel, label=pwiseID)) +
ggplot(all.betadist.df, aes(x=LegendLabel, y=betadistance, color=LegendLabel, shape=LegendLabel)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(alpha=0.7, position=position_jitterdodge(jitter.width = 0.2)) +
#geom_label_repel(data=all.betadist.df %>% filter(LegendLabel=="bray - standard" & betadistance == max.bray.standard), nudge_x = 0.8) +
#geom_label_repel(data=all.betadist.df %>% filter(LegendLabel=="dice - standard" & betadistance == max.dice.standard), nudge_x = 0.8) +
#geom_label_repel(data=all.betadist.df %>% filter(LegendLabel=="morisita - standard" & betadistance == max.morisita.standard), nudge_y = 0.2, nudge_x = 0.2) +
facet_grid( Method ~ RareType) +
scale_color_manual(values=pal3) +
scale_shape_manual(values=shape4) +
labs(title="", x="", y="distance", color="", shape="") +
theme_devon() +
theme(legend.position="top", axis.text.x = element_text(angle=22.5, hjust=1, size=9))
## plot; save as 13_mock_betadist_boxplot; export at 800x800
#ggplot(all.betadist.df, aes(x=LegendLabel, y=betadistance, color=LegendLabel, shape=LegendLabel, label=pwiseID)) +
ggplot(all.betadist.df, aes(x=LegendLabel, y=betadistance, color=LegendLabel, shape=LegendLabel)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(alpha=0.7, position=position_jitterdodge(jitter.width = 0.2)) +
#geom_label_repel(data=all.betadist.df %>% filter(LegendLabel=="bray - standard" & betadistance == max.bray.standard), nudge_x = 0.8) +
#geom_label_repel(data=all.betadist.df %>% filter(LegendLabel=="dice - standard" & betadistance == max.dice.standard), nudge_x = 0.8) +
#geom_label_repel(data=all.betadist.df %>% filter(LegendLabel=="morisita - standard" & betadistance == max.morisita.standard), nudge_y = 0.2, nudge_x = 0.2) +
facet_grid( Method ~ RareType) +
scale_color_manual(values=pal3) +
scale_shape_manual(values=shape4) +
labs(title="", x="", y="distance", color="", shape="") +
theme_devon() +
theme(legend.position="top", axis.text.x = element_text(angle=22.5, hjust=1, size=9)) +
guide(legend(ncol = 3))
## plot; save as 13_mock_betadist_boxplot; export at 800x800
#ggplot(all.betadist.df, aes(x=LegendLabel, y=betadistance, color=LegendLabel, shape=LegendLabel, label=pwiseID)) +
ggplot(all.betadist.df, aes(x=LegendLabel, y=betadistance, color=LegendLabel, shape=LegendLabel)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(alpha=0.7, position=position_jitterdodge(jitter.width = 0.2)) +
#geom_label_repel(data=all.betadist.df %>% filter(LegendLabel=="bray - standard" & betadistance == max.bray.standard), nudge_x = 0.8) +
#geom_label_repel(data=all.betadist.df %>% filter(LegendLabel=="dice - standard" & betadistance == max.dice.standard), nudge_x = 0.8) +
#geom_label_repel(data=all.betadist.df %>% filter(LegendLabel=="morisita - standard" & betadistance == max.morisita.standard), nudge_y = 0.2, nudge_x = 0.2) +
facet_grid( Method ~ RareType) +
scale_color_manual(values=pal3) +
scale_shape_manual(values=shape4) +
labs(title="", x="", y="distance", color="", shape="") +
theme_devon() +
theme(legend.position="top", axis.text.x = element_text(angle=22.5, hjust=1, size=9)) +
guides(legend(ncol = 3))
## plot; save as 13_mock_betadist_boxplot; export at 800x800
#ggplot(all.betadist.df, aes(x=LegendLabel, y=betadistance, color=LegendLabel, shape=LegendLabel, label=pwiseID)) +
ggplot(all.betadist.df, aes(x=LegendLabel, y=betadistance, color=LegendLabel, shape=LegendLabel)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(alpha=0.7, position=position_jitterdodge(jitter.width = 0.2)) +
#geom_label_repel(data=all.betadist.df %>% filter(LegendLabel=="bray - standard" & betadistance == max.bray.standard), nudge_x = 0.8) +
#geom_label_repel(data=all.betadist.df %>% filter(LegendLabel=="dice - standard" & betadistance == max.dice.standard), nudge_x = 0.8) +
#geom_label_repel(data=all.betadist.df %>% filter(LegendLabel=="morisita - standard" & betadistance == max.morisita.standard), nudge_y = 0.2, nudge_x = 0.2) +
facet_grid( Method ~ RareType) +
scale_color_manual(values=pal3) +
scale_shape_manual(values=shape4) +
labs(title="", x="", y="distance", color="", shape="") +
theme_devon() +
theme(legend.position="top", axis.text.x = element_text(angle=22.5, hjust=1, size=9)) +
guide_legend(nrow = 3)
## plot; save as 13_mock_betadist_boxplot; export at 800x800
#ggplot(all.betadist.df, aes(x=LegendLabel, y=betadistance, color=LegendLabel, shape=LegendLabel, label=pwiseID)) +
ggplot(all.betadist.df, aes(x=LegendLabel, y=betadistance, color=LegendLabel, shape=LegendLabel)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(alpha=0.7, position=position_jitterdodge(jitter.width = 0.2)) +
#geom_label_repel(data=all.betadist.df %>% filter(LegendLabel=="bray - standard" & betadistance == max.bray.standard), nudge_x = 0.8) +
#geom_label_repel(data=all.betadist.df %>% filter(LegendLabel=="dice - standard" & betadistance == max.dice.standard), nudge_x = 0.8) +
#geom_label_repel(data=all.betadist.df %>% filter(LegendLabel=="morisita - standard" & betadistance == max.morisita.standard), nudge_y = 0.2, nudge_x = 0.2) +
facet_grid( Method ~ RareType) +
scale_color_manual(values=pal3) +
scale_shape_manual(values=shape4) +
labs(title="", x="", y="distance", color="", shape="") +
theme_devon() +
theme(legend.position="top", axis.text.x = element_text(angle=22.5, hjust=1, size=9)) +
guides(col=guide_legend(nrow = 3))
head(all.betadist.df)
tmp <- aov(betadistance ~ Method * Filt, data = all.betadist.df)
summary(tmp)
library(dunn.test)
## ANOVA estimate of variation
tmp <- aov(betadistance ~ Method * Filt * RareType, data = all.betadist.df)
summary(tmp)
## ANOVA estimate of variation
tmp <- aov(betadistance ~ Method * Filt * RareType * BetaType, data = all.betadist.df)
summary(tmp)
## Dunn's test
tmpfile <- all.betadist.df$Labeler <- paste(all.betadist.df$Method, all.betadist.df$Filt, all.betadist.df$BetaType, all.betadist.df$RareType)
## Dunn's test
all.betadist.df$Labeler <- paste(all.betadist.df$Method, all.betadist.df$Filt, all.betadist.df$BetaType, all.betadist.df$RareType)
head(all.betadist.df)
## Dunn's test
all.betadist.df$Labeler <- paste(all.betadist.df$Method, all.betadist.df$Filt, all.betadist.df$BetaType, all.betadist.df$RareType, sep="-")
head(all.betadist.df)
rm(tmp)
tmp.dunn = dunnTest(betadistance ~ Labeler, data=all.betadist.df, method="bh")
tmp.dunn$res
nrow(tmp.dunn$res)
mock.dunn.df <- (tmp.dunn$res)
View(mock.dunn.df)
View(tmp.dunn)
tmp.dunn
?kruskal.test()
kruskal.test(betadistance ~ Labeler, data=all.betadist.df)
all.betadist.df$Labeler <- as.factor(all.betadist.df$Labeler)
kruskal.test(betadistance ~ Labeler, data=all.betadist.df)
library(tidyverse)
library(reshape2)
library(vegan)
library(phyloseq)
library(dunn.test)
citation(package="tidyverse")
citation(package="reshape2")
citation(package="vegan")
citation(package="phyloseq")
citation(package="dunn.test")
citation(package="qiime2R")
citation(package="stringi")
citation(package="scales")
citation(package="ggrepel")
citation(package="viridis")
citation(package="ggridges")
citation(package="cowplot")
citation(package="FSA")
citation(package="ggpubr")
citation(package="Matrix")
citation(package="biomformat")
citation(package="R")
citation()
?aov
citation(library="stats")
citation(package="stats")
citation(package="iNEXT")
print(citation(package="iNEXT", bibtex=TRUE))
citation(package="iNEXT", bibtex=TRUE)
citation(package="iNEXT", bibtex=TRUE)
print(citation(package="iNEXT"), bibtex=TRUE)
setwd("~/Repos/tidybug/data/databases/")
library(tidyverse)
df <- read.delim("missingFamilyCounts.txt")
df <- read.delim("missingFamilyCounts.txt", sep = "\t")
df <- read.delim("missingFamilyCounts.txt", sep = " ")
View(df)
library(readr)
missingFamilyCounts <- read_table2("missingFamilyCounts.txt",
col_names = FALSE)
View(missingFamilyCounts)
df <- read_table2("missingFamilyCounts.txt", col_names = FALSE)
p$df <- df$X1/sum(df$X1)
df <- read_table2("missingFamilyCounts.txt", col_names = FALSE)
p$df <- df$X1/sum(df$X1)
df$p <- df$X1/sum(df$X1)
df$p <- round(df$X1/sum(df$X1),2)
df$csum <- cumsum(df$p)
35671+18657+12018
