ridge.vs <- ggplot(data = df %>% filter(Method=="vsearch"), aes(y = Filt, x = Reads, fill=Filt)) +
geom_density_ridges(scale=2, alpha=0.7) +
#scale_x_continuous(labels = comma, trans = "log2") +
xlim(0,100) +
facet_grid(Method ~ Library) +
scale_fill_manual(values=pal3) +
labs(x="sequence counts", y="", fill="",
caption = "only sequence variants per sample with <= 100 filtered reads not shown (~ 92% of all observations)") +
theme_devon() +
theme(legend.position="none",
axis.text.x = element_text(angle=22.5, hjust = 1),
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
strip.background.x = element_blank(), strip.text.x = element_blank())
plot_grid(ridge.da, ridge.db, ridge.vs, ncol=1, rel_heights = c(1.7,1.1,1.3))
ridge.vs <- ggplot(data = df %>% filter(Method=="vsearch"), aes(y = Filt, x = Reads, fill=Filt)) +
geom_density_ridges(scale=2, alpha=0.7) +
#scale_x_continuous(labels = comma, trans = "log2") +
xlim(0,100) +
facet_grid(Method ~ Library) +
scale_fill_manual(values=pal3) +
labs(x="sequence counts", y="", fill="",
caption = "only sequence variants per sample with <= 100 filtered reads shown (~ 92% of all observations)") +
theme_devon() +
theme(legend.position="none",
axis.text.x = element_text(angle=22.5, hjust = 1),
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
strip.background.x = element_blank(), strip.text.x = element_blank())
plot_grid(ridge.da, ridge.db, ridge.vs, ncol=1, rel_heights = c(1.7,1.1,1.3))
## generate summaries for number of ASVs per sample, per pipeline and filtering method
df_hashCounts <- df %>% group_by(Method, Filt, SeqID, Library) %>% summarise(HashCounts=n())
## reset the levels for plot
df_hashCounts$Filt <- factor(df_hashCounts$Filt,levels = c("basic", "standard", "extra"))
## plot; save as 6_figure_GuanoASVCounts_byFilterMethod
ggplot(data = df_hashCounts, aes(x = Method, y = HashCounts, color=Method)) +
geom_hline(yintercept = 50, linetype="dotted", color="firebrick", size=1) +
geom_jitter(alpha=0.55, width = 0.25) +
facet_grid(Filt ~ Library) +
scale_y_continuous(trans = "log2") +
scale_color_manual(values=pipepal3) +
labs(title="", x="", y="sequence variants per sample", color="") +
theme_devon() +
theme(legend.position="top", legend.text = element_text(size = 12), axis.text.x = element_text(angle=22.5, hjust = 1))
## plot; save as 6_figure_GuanoASVCounts_byFilterMethod
ggplot(data = df_hashCounts, aes(x = Method, y = HashCounts, color=Method)) +
geom_hline(yintercept = 50, linetype="dotted", color="firebrick", size=1) +
geom_jitter(alpha=0.55, width = 0.25) +
facet_grid(Filt ~ Library) +
scale_y_continuous(trans = "log2") +
scale_color_manual(values=pal3) +
labs(title="", x="", y="sequence variants per sample", color="") +
theme_devon() +
theme(legend.position="top", legend.text = element_text(size = 12), axis.text.x = element_text(angle=22.5, hjust = 1))
## plot; save as 6_figure_GuanoASVCounts_byFilterMethod
ggplot(data = df_hashCounts, aes(x = Filt, y = HashCounts, color=Filt)) +
geom_hline(yintercept = 50, linetype="dotted", color="firebrick", size=1) +
geom_jitter(alpha=0.55, width = 0.25) +
facet_grid(Method ~ Library) +
scale_y_continuous(trans = "log2") +
scale_color_manual(values=pal3) +
labs(title="", x="", y="sequence variants per sample", color="") +
theme_devon() +
theme(legend.position="top", legend.text = element_text(size = 12), axis.text.x = element_text(angle=22.5, hjust = 1))
## plot; save as 6_figure_GuanoASVCounts_byFilterMethod
ggplot(data = df_hashCounts, aes(x = Filt, y = HashCounts, color=Filt)) +
#geom_hline(yintercept = 50, linetype="dotted", color="firebrick", size=1) +
geom_jitter(alpha=0.55, width = 0.25) +
facet_grid(Method ~ Library) +
scale_y_continuous(trans = "log2") +
scale_color_manual(values=pal3) +
labs(title="", x="", y="sequence variants per sample", color="") +
theme_devon() +
theme(legend.position="top", legend.text = element_text(size = 12), axis.text.x = element_text(angle=22.5, hjust = 1))
## plot; save as 6_figure_GuanoASVCounts_byFilterMethod
ggplot(data = df_hashCounts, aes(x = Filt, y = HashCounts, color=Filt)) +
#geom_hline(yintercept = 50, linetype="dotted", color="firebrick", size=1) +
geom_jitter(alpha=0.55, width = 0.25) +
facet_grid(Method ~ Library) +
scale_y_continuous(trans = "log2") +
scale_color_manual(values=pal3) +
labs(title="", x="", y="sequence variants per sample", color="") +
theme_devon() +
#theme(legend.position="top", legend.text = element_text(size = 12), axis.text.x = element_text(angle=22.5, hjust = 1))
theme(legend.position="top", legend.text = element_text(size = 12))
## plot; save as 6_figure_GuanoASVCounts_byFilterMethod
ggplot(data = df_hashCounts, aes(x = Filt, y = HashCounts, color=Filt)) +
#geom_hline(yintercept = 50, linetype="dotted", color="firebrick", size=1) +
geom_jitter(alpha=0.55, width = 0.25) +
facet_grid(Method ~ Library) +
scale_y_continuous(trans = "log2") +
scale_color_manual(values=pal3) +
labs(title="", x="", y="sequence variants per sample", color="") +
theme_devon() +
#theme(legend.position="top", legend.text = element_text(size = 12), axis.text.x = element_text(angle=22.5, hjust = 1))
theme(legend.position="top", legend.text = element_text(size = 12), axis.text.x = element_blank(), axis.ticks.x = element_blank())
## plot; save as 6_figure_GuanoASVCounts_byFilterMethod
ggplot(data = df_hashCounts, aes(x = Filt, y = HashCounts, color=Filt)) +
#geom_hline(yintercept = 50, linetype="dotted", color="firebrick", size=1) +
geom_jitter(alpha=0.55, width = 0.25) +
facet_grid(Method ~ Library) +
#scale_y_continuous(trans = "log2") +
scale_color_manual(values=pal3) +
labs(title="", x="", y="sequence variants per sample", color="") +
theme_devon() +
#theme(legend.position="top", legend.text = element_text(size = 12), axis.text.x = element_text(angle=22.5, hjust = 1))
theme(legend.position="top", legend.text = element_text(size = 12), axis.text.x = element_blank(), axis.ticks.x = element_blank())
## plot; save as 6_figure_GuanoASVCounts_byFilterMethod
ggplot(data = df_hashCounts, aes(x = Filt, y = HashCounts, color=Filt)) +
#geom_hline(yintercept = 50, linetype="dotted", color="firebrick", size=1) +
geom_jitter(alpha=0.55, width = 0.25) +
facet_grid(Method ~ Library) +
#scale_y_continuous(trans = "log2") +
ylim(0,600) +
scale_color_manual(values=pal3) +
labs(title="", x="", y="sequence variants per sample", color="") +
theme_devon() +
#theme(legend.position="top", legend.text = element_text(size = 12), axis.text.x = element_text(angle=22.5, hjust = 1))
theme(legend.position="top", legend.text = element_text(size = 12), axis.text.x = element_blank(), axis.ticks.x = element_blank())
theme_devon <- function () {
theme_bw(base_size=12, base_family="Avenir") %+replace%
theme(
panel.background  = element_blank(),
plot.background = element_rect(fill="transparent", colour=NA),
legend.background = element_rect(fill="transparent", colour=NA),
legend.key = element_rect(fill="transparent", colour=NA)
)
}
df <- read_csv("https://github.com/devonorourke/tidybug/raw/master/data/text_tables/all.filtmethods.df.csv.gz")
df <- df %>% filter(SampleType != "mock")
meta <- read_delim("https://github.com/devonorourke/tidybug/raw/master/data/metadata/large_meta.txt", delim = "\t")
meta <- meta %>% select(SeqID, StudyID, SampleType, Site, Date, DNAplate)
meta_names <- dplyr::intersect(df$SeqID, meta$SeqID)
meta <- meta %>% filter(SeqID %in% meta_names)
rm(meta_names)
meta <- meta %>% filter(Date != "unknown")
meta$Site <- gsub("control", "ncontrol", meta$Site)
meta$Date <- gsub("control", "ncontrol", meta$Date)
## overwrite new $Date and $WOY columns with lubridate package to ensure we're selecting a consistent WOY
meta$Date <- as.character(lubridate::mdy(meta$Date))
meta$WOY <- as.character(lubridate::isoweek(meta$Date))
## adding in "startingMonth" to WOY for later groupings
WOYstring <- c("14",  "15",  "16",  "17",  "18",  "19",  "20",  "21",  "22",  "23",  "24",  "25",  "26",  "27",  "28",  "29",  "30",  "31",  "32",  "33",  "34",  "35",  "36",  "37",  "38",  "39",  "40",  "41",  "42",  "43", "ncontrol", "mock")
StartMonthstring <- c("April","April","April","April","April","May","May","May","May","June","June","June","June","July","July","July","July","July","August","August","August","August","September","September","September","September","October","October","October","October", "ncontrol", "mock")
tmp <- data.frame(WOYstring, StartMonthstring)
colnames(tmp) <- c("WOY", "MonthStart")
meta <- merge(meta, tmp, all.x=TRUE)
rm(WOYstring, StartMonthstring, tmp)
meta$MonthStart <- as.character(meta$MonthStart)
meta[is.na(meta)] <- "ncontrol"
meta <- meta %>% select(-StudyID, -SampleType)
## merge data:
df <- merge(df, meta, by='SeqID', all.x=TRUE)
######### Filtering for FOX only data
targetLibs <- c("libA", "libD")
tmp.df <- df %>% filter(Library %in% targetLibs)
select1 <- "FOX"
dat.tmp1 <- tmp.df %>% filter(Site %in% select1)  ## data from FOX
select2 <- dat.tmp1 %>% distinct(DNAplate)
select2 <- as.character(select2$DNAplate)
dat.tmp2 <- tmp.df %>% filter(SampleType=="ncontrol" & DNAplate %in% select2)
## no negative control samples in any plates associated with FOX samples
## selecting just FOX samples from df object moving forward for diversity analyses
rm(targetLibs, tmp.df, select1, dat.tmp1, select2, dat.tmp2)
fox.df <- df %>% filter(Site=="FOX")
rm(df)
## alpha function applied to calculate diversity measures: observed OTUs, simpson, and shannon
alpha.function <- function(data, filter_exp, filter_exp2) {
filter_exp_enq <- enquo(filter_exp)
filter_exp_enq2 <- enquo(filter_exp2)
tmp.df <- data %>% filter(!!filter_exp_enq) %>% filter(!!filter_exp_enq2)
Method <- tmp.df %>% distinct(Method)
Filt <- tmp.df %>% distinct(Filt)
Rare <- "unrarefied"
tmp.mat <- dcast(tmp.df, SeqID ~ HashID, value.var = "Reads", fill=0)
row.names(tmp.mat) <- tmp.mat$SeqID
tmp.mat$SeqID <- NULL
SeqID <- row.names(tmp.mat)
Simpson <- diversity(tmp.mat, index="simpson")
Shannon <- diversity(tmp.mat, index="shannon")
OTUs <- specnumber(tmp.mat)
data.frame(SeqID, OTUs, Simpson, Shannon, Method, Filt, Rare, row.names = NULL)
}
dada2.basic <- alpha.function(fox.df, Method=="dada2", Filt=="basic")
dada2.standard <- alpha.function(fox.df, Method=="dada2", Filt=="standard")
dada2.extra <- alpha.function(fox.df, Method=="dada2", Filt=="extra")
deblur.basic <- alpha.function(fox.df, Method=="deblur", Filt=="basic")
deblur.standard <- alpha.function(fox.df, Method=="deblur", Filt=="standard")
deblur.extra <- alpha.function(fox.df, Method=="deblur", Filt=="extra")
vsearch.basic <- alpha.function(fox.df, Method=="vsearch", Filt=="basic")
vsearch.standard <- alpha.function(fox.df, Method=="vsearch", Filt=="standard")
vsearch.extra <- alpha.function(fox.df, Method=="vsearch", Filt=="extra")
## merge into single dataframe
all.fox.unrarefied <- rbind(dada2.basic, dada2.standard, dada2.extra, deblur.basic, deblur.standard, deblur.extra, vsearch.basic, vsearch.standard, vsearch.extra)
rm(dada2.basic, dada2.standard, dada2.extra, deblur.basic, deblur.standard, deblur.extra, vsearch.basic, vsearch.standard, vsearch.extra)
## repeat calculations, but rarefy data first
## repeat, but this time rarefy the datasets.
## rarefying without replacement in Phyloseq
## alpha function applied to calculate diversity measures: observed OTUs, simpson, and shannon
alpha.function.rfy <- function(data, filter_exp, filter_exp2) {
filter_exp_enq <- enquo(filter_exp)
filter_exp_enq2 <- enquo(filter_exp2)
tmp.df <- data %>% filter(!!filter_exp_enq) %>% filter(!!filter_exp_enq2)
Method <- tmp.df %>% distinct(Method)
Filt <- tmp.df %>% distinct(Filt)
Rare <- "rarefied"
tmp.mat <- dcast(tmp.df, SeqID ~ HashID, value.var = "Reads", fill=0)
rm(tmp.df)
row.names(tmp.mat) <- tmp.mat$SeqID
tmp.mat$SeqID <- NULL
tmp.phy <- otu_table(tmp.mat, taxa_are_rows = TRUE)
tmp.phy <- phyloseq(tmp.phy)
set.seed(100)
rare.phy <- rarefy_even_depth(tmp.phy, rngseed = FALSE, replace = FALSE, trimOTUs = TRUE)
tmp.mat = as(otu_table(rare.phy), "matrix")
rm(tmp.phy, rare.phy)
SeqID <- row.names(tmp.mat)
Simpson <- diversity(tmp.mat, index="simpson")
Shannon <- diversity(tmp.mat, index="shannon")
OTUs <- specnumber(tmp.mat)
data.frame(SeqID, OTUs, Simpson, Shannon, Method, Filt, Rare, row.names = NULL)
}
r.dada2.basic <- alpha.function.rfy(fox.df, Method=="dada2", Filt=="basic")
r.dada2.standard <- alpha.function.rfy(fox.df, Method=="dada2", Filt=="standard")
r.dada2.extra <- alpha.function.rfy(fox.df, Method=="dada2", Filt=="extra")
r.deblur.basic <- alpha.function.rfy(fox.df, Method=="deblur", Filt=="basic")
r.deblur.standard <- alpha.function.rfy(fox.df, Method=="deblur", Filt=="standard")
r.deblur.extra <- alpha.function.rfy(fox.df, Method=="deblur", Filt=="extra")
r.vsearch.basic <- alpha.function.rfy(fox.df, Method=="vsearch", Filt=="basic")
r.vsearch.standard <- alpha.function.rfy(fox.df, Method=="vsearch", Filt=="standard")
r.vsearch.extra <- alpha.function.rfy(fox.df, Method=="vsearch", Filt=="extra")
all.fox.rarefied <- rbind(r.dada2.basic, r.dada2.standard, r.dada2.extra, r.deblur.basic, r.deblur.standard, r.deblur.extra, r.vsearch.basic, r.vsearch.standard, r.vsearch.extra)
rm(r.dada2.basic, r.dada2.standard, r.dada2.extra, r.deblur.basic, r.deblur.standard, r.deblur.extra, r.vsearch.basic, r.vsearch.standard, r.vsearch.extra)
## combine datasets
all.fox.alpha <- rbind(all.fox.rarefied, all.fox.unrarefied)
rm(all.fox.rarefied, all.fox.unrarefied)
## add in a the WOY and MonthStart metadata
tmpmeta <- meta %>% select(SeqID, WOY, MonthStart)
all.fox.alpha <- merge(all.fox.alpha, tmpmeta)
rm(tmpmeta, meta)
## plotting only the months with sufficient data for this example (April,May,September,October)
SelectMonths=c("April", "May", "September", "October")
select.fox.alpha <- all.fox.alpha %>% filter(MonthStart %in% SelectMonths)
## add Labeler for plotting:
select.fox.alpha$Labeler <- paste(select.fox.alpha$Filt, select.fox.alpha$Rare, sep="-")
unique(select.fox.alpha$Labeler)
select.fox.alpha$Labeler <- factor(select.fox.alpha$Labeler,
levels = c("basic-unrarefied", "basic-rarefied", "extra-rarefied", "standard-rarefied", "extra-unrarefied", "standard-unrarefied"))
select.fox.alpha$MonthStart <- factor(select.fox.alpha$MonthStart,levels = c("April", "May", "September", "October"))
## generate palette for 6 colors following plot5 color scheme but altering hue:
pal6 <- c('#ebdb8e', '#9f9244', '#c8b2e8', '#6c42b8', '#a9d190', '#628a47')
## plot differences in observed OTUs by $MonthStart
## save as 7_figure_FoxState_OTUs_byFilterMethodsandRarefy; export at 1000x1000
ggplot(select.fox.alpha, aes(x=MonthStart, y=OTUs, color=Labeler)) +
#scale_y_continuous(trans = "log2") +
ylim(0,157) +
scale_color_manual(values = pal6) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(alpha=0.8, position=position_jitterdodge(jitter.width = 0.2)) +
facet_grid(. ~ Method) +
labs(title = "", x="", y="Number of unique sequences", color="",
caption = "6 outliers > 150 OTUs not shown in vsearch ~ basic plot (range 157-223 OTUs / sample)\n Only select data collected at single site (Fox State Forest, Hillsboro NH) shown") +
theme_devon() + theme(legend.position = "top", axis.text.x = element_text(angle=22.5, hjust=1))
## plot differences in observed OTUs by $MonthStart
## save as 7_figure_FoxState_OTUs_byFilterMethodsandRarefy; export at 1000x1000
ggplot(select.fox.alpha, aes(x=MonthStart, y=OTUs, color=Labeler)) +
#scale_y_continuous(trans = "log2") +
ylim(0,157) +
scale_color_manual(values = pal6) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(alpha=0.8, position=position_jitterdodge(jitter.width = 0.2)) +
facet_grid(Method ~ .) +
labs(title = "", x="", y="Number of unique sequences", color="",
caption = "6 outliers > 150 OTUs not shown in vsearch ~ basic plot (range 157-223 OTUs / sample)\n Only select data collected at single site (Fox State Forest, Hillsboro NH) shown") +
theme_devon() + theme(legend.position = "top", axis.text.x = element_text(angle=22.5, hjust=1))
pal6 <- c('#9f9244', '#ebdb8e', '#6c42b8', '#c8b2e8', '#628a47', '#a9d190')
## plot differences in observed OTUs by $MonthStart
## save as 7_figure_FoxState_OTUs_byFilterMethodsandRarefy; export at 1000x1000
ggplot(select.fox.alpha, aes(x=MonthStart, y=OTUs, color=Labeler)) +
#scale_y_continuous(trans = "log2") +
ylim(0,157) +
scale_color_manual(values = pal6) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(alpha=0.8, position=position_jitterdodge(jitter.width = 0.2)) +
facet_grid(Method ~ .) +
labs(title = "", x="", y="Number of unique sequences", color="",
caption = "6 outliers > 150 OTUs not shown in vsearch ~ basic plot (range 157-223 OTUs / sample)\n Only select data collected at single site (Fox State Forest, Hillsboro NH) shown") +
theme_devon() + theme(legend.position = "top", axis.text.x = element_text(angle=22.5, hjust=1))
select.fox.alpha$Labeler <- factor(select.fox.alpha$Labeler,
levels = c("basic-unrarefied", "basic-rarefied", "standard-unrarefied", "standard-rarefied", "extra-unrarefied", "extra-rarefied"))
## plot differences in observed OTUs by $MonthStart
## save as 7_figure_FoxState_OTUs_byFilterMethodsandRarefy; export at 1000x1000
ggplot(select.fox.alpha, aes(x=MonthStart, y=OTUs, color=Labeler)) +
#scale_y_continuous(trans = "log2") +
ylim(0,157) +
scale_color_manual(values = pal6) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(alpha=0.8, position=position_jitterdodge(jitter.width = 0.2)) +
facet_grid(Method ~ .) +
labs(title = "", x="", y="Number of unique sequences", color="",
caption = "6 outliers > 150 OTUs not shown in vsearch ~ basic plot (range 157-223 OTUs / sample)\n Only select data collected at single site (Fox State Forest, Hillsboro NH) shown") +
theme_devon() + theme(legend.position = "top", axis.text.x = element_text(angle=22.5, hjust=1))
View(select.fox.alpha)
## plot differences in observed OTUs by $MonthStart
## save as 7_figure_FoxState_OTUs_byFilterMethodsandRarefy; export at 1000x1000
ggplot(select.fox.alpha, aes(x=MonthStart, y=OTUs, color=Labeler)) +
#scale_y_continuous(trans = "log2") +
ylim(0,157) +
scale_color_manual(values = pal6) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(alpha=0.8, position=position_jitterdodge(jitter.width = 0.2)) +
facet_grid(Method ~ .) +
labs(title = "", x="", y="Number of unique sequences", color="",
caption = "6 outliers > 150 OTUs not shown in plot - all vsearch+basic+unrarefied (range 157-223 OTUs / sample)\n Only select data collected at single site (Fox State Forest, Hillsboro NH) shown") +
theme_devon() + theme(legend.position = "top", axis.text.x = element_text(angle=22.5, hjust=1))
mock <- df %>% filter(SampleType == "mock")
## import data:
df <- read_csv("https://github.com/devonorourke/tidybug/raw/master/data/text_tables/all.filtmethods.df.csv.gz")
mock <- df %>% filter(SampleType == "mock")
rm(df)
rm(all.fox.alpha)
rm(select.fox.alpha)
rm(fox.df)
View(mock)
mock$SeqID <- as.character(mock$SeqID)
unique(mock$SeqID)
mock$SeqID[which(mock$SeqID=="mockIM4p4L1")] <= "libA"
mock$SeqID[which(mock$SeqID=="mockIM4p4L1")] <- "libA"
mock$SeqID[which(mock$SeqID=="mockIM4p4L2")] <- "libB"
mock$SeqID[which(mock$SeqID=="mockIM4p7L1")] <- "libC"
mock$SeqID[which(mock$SeqID=="mockIM4p7L2")] <- "libD"
## import data and select mock samples:
df <- read_csv("https://github.com/devonorourke/tidybug/raw/master/data/text_tables/all.filtmethods.df.csv.gz")
## filter out mock samples:
df <- df %>% filter(SampleType != "mock")
## generate 3 color palette to distinguish between filtering pipelines:
pal3 <- c('#9f9244', '#6c42b8', '#628a47', '#a9d190')
## reset the levels for plot
df$Filt <- factor(df$Filt,levels = c("basic", "standard", "extra"))
df$Method <- factor(df$Method, levels = c("dada2", "deblur", "vsearch"))
## plot; save as 5_figure_GuanoSeqCounts_byFilterMethod
ridge.da <- ggplot(data = df %>% filter(Method=="dada2"), aes(y = Filt, x = Reads, fill=Filt)) +
geom_density_ridges(scale=2, alpha=0.7) +
#scale_x_continuous(labels = comma, trans = "log2") +
xlim(0,100) +
facet_grid(Method ~ Library) +
scale_fill_manual(values=pal3) +
labs(title="", x="", y="") +
theme_devon() +
theme(legend.position="top", legend.text = element_text(size = 12),
axis.text = element_blank(), axis.ticks = element_blank())
ridge.db <- ggplot(data = df %>% filter(Method=="deblur"), aes(y = Filt, x = Reads, fill=Filt)) +
geom_density_ridges(scale=2, alpha=0.7) +
#scale_x_continuous(labels = comma, trans = "log2") +
xlim(0,100) +
facet_grid(Method ~ Library) +
scale_fill_manual(values=pal3) +
labs(x=" counts", y="") +
theme_devon() +
theme(legend.position="none", axis.text = element_blank(), axis.ticks = element_blank(),
strip.text.x = element_blank(), strip.background.x = element_blank())
ridge.vs <- ggplot(data = df %>% filter(Method=="vsearch"), aes(y = Filt, x = Reads, fill=Filt)) +
geom_density_ridges(scale=2, alpha=0.7) +
#scale_x_continuous(labels = comma, trans = "log2") +
xlim(0,100) +
facet_grid(Method ~ Library) +
scale_fill_manual(values=pal3) +
labs(x="sequence counts", y="", fill="",
caption = "only sequence variants per sample with <= 100 filtered reads shown (~ 92% of all observations)") +
theme_devon() +
theme(legend.position="none",
axis.text.x = element_text(angle=22.5, hjust = 1),
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
strip.background.x = element_blank(), strip.text.x = element_blank())
plot_grid(ridge.da, ridge.db, ridge.vs, ncol=1, rel_heights = c(1.7,1.1,1.3))
## alpha function applied to calculate diversity measures: observed OTUs, simpson, and shannon
alpha.function <- function(data, filter_exp, filter_exp2) {
filter_exp_enq <- enquo(filter_exp)
filter_exp_enq2 <- enquo(filter_exp2)
tmp.df <- data %>% filter(!!filter_exp_enq) %>% filter(!!filter_exp_enq2)
Method <- tmp.df %>% distinct(Method)
Filt <- tmp.df %>% distinct(Filt)
Rare <- "unrarefied"
tmp.mat <- dcast(tmp.df, SeqID ~ HashID, value.var = "Reads", fill=0)
row.names(tmp.mat) <- tmp.mat$SeqID
tmp.mat$SeqID <- NULL
SeqID <- row.names(tmp.mat)
Simpson <- diversity(tmp.mat, index="simpson")
Shannon <- diversity(tmp.mat, index="shannon")
OTUs <- specnumber(tmp.mat)
data.frame(SeqID, OTUs, Simpson, Shannon, Method, Filt, Rare, row.names = NULL)
}
## calculate alphas for unrarefied data
dada2.basic <- alpha.function(mock, Method=="dada2", Filt=="basic")
View(dada2.basic)
dada2.standard <- alpha.function(mock, Method=="dada2", Filt=="standard")
dada2.extra <- alpha.function(mock, Method=="dada2", Filt=="extra")
deblur.basic <- alpha.function(mock, Method=="deblur", Filt=="basic")
deblur.standard <- alpha.function(mock, Method=="deblur", Filt=="standard")
deblur.extra <- alpha.function(mock, Method=="deblur", Filt=="extra")
vsearch.basic <- alpha.function(mock, Method=="vsearch", Filt=="basic")
vsearch.standard <- alpha.function(mock, Method=="vsearch", Filt=="standard")
vsearch.extra <- alpha.function(mock, Method=="vsearch", Filt=="extra")
rm(ridge.da, ridge.db, ridge.vs)
rm(df)
## merge into single dataframe
all.mock.unrarefied <- rbind(dada2.basic, dada2.standard, dada2.extra, deblur.basic, deblur.standard, deblur.extra, vsearch.basic, vsearch.standard, vsearch.extra)
rm(dada2.basic, dada2.standard, dada2.extra, deblur.basic, deblur.standard, deblur.extra, vsearch.basic, vsearch.standard, vsearch.extra)
r.dada2.basic <- alpha.function.rfy(mock, Method=="dada2", Filt=="basic")
r.dada2.standard <- alpha.function.rfy(mock, Method=="dada2", Filt=="standard")
r.dada2.extra <- alpha.function.rfy(mock, Method=="dada2", Filt=="extra")
r.deblur.basic <- alpha.function.rfy(mock, Method=="deblur", Filt=="basic")
r.deblur.standard <- alpha.function.rfy(mock, Method=="deblur", Filt=="standard")
r.deblur.extra <- alpha.function.rfy(mock, Method=="deblur", Filt=="extra")
r.vsearch.basic <- alpha.function.rfy(mock, Method=="vsearch", Filt=="basic")
r.vsearch.standard <- alpha.function.rfy(mock, Method=="vsearch", Filt=="standard")
r.vsearch.extra <- alpha.function.rfy(mock, Method=="vsearch", Filt=="extra")
all.mock.rarefied <- rbind(r.dada2.basic, r.dada2.standard, r.dada2.extra, r.deblur.basic, r.deblur.standard, r.deblur.extra, r.vsearch.basic, r.vsearch.standard, r.vsearch.extra)
rm(r.dada2.basic, r.dada2.standard, r.dada2.extra, r.deblur.basic, r.deblur.standard, r.deblur.extra, r.vsearch.basic, r.vsearch.standard, r.vsearch.extra)
## combine datasets
all.mock.alpha <- rbind(all.mock.rarefied, all.mock.unrarefied)
rm(all.mock.rarefied, all.mock.unrarefied)
## set the levels
select.mock.alpha$Method <- factor(select.mock.alpha$Method,levels = c("dada2", "deblur", "vsearch"))
select.mock.alpha$Labeler <- factor(select.mock.alpha$Labeler,
levels = c("basic-unrarefied", "basic-rarefied", "standard-unrarefied", "standard-rarefied", "extra-unrarefied", "extra-rarefied"))
## add Labeler for plotting:
all.mock.alpha$Labeler <- paste(all.mock.alpha$Filt, all.mock.alpha$Rare, sep="-")
## set the levels
all.mock.alpha$Method <- factor(all.mock.alpha$Method,levels = c("dada2", "deblur", "vsearch"))
all.mock.alpha$Labeler <- factor(all.mock.alpha$Labeler,
levels = c("basic-unrarefied", "basic-rarefied", "standard-unrarefied", "standard-rarefied", "extra-unrarefied", "extra-rarefied"))
View(all.mock.alpha)
ggplot(all.mock.alpha, aes(x=SeqID, y=OTUs, color=Labeler)) +
#scale_y_continuous(trans = "log2") +
#ylim(0,157) +
scale_color_manual(values = pal6) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(alpha=0.8, position=position_jitterdodge(jitter.width = 0.2)) +
facet_grid(Method ~ .)
theme_devon() + theme(legend.position = "top", axis.text.x = element_text(angle=22.5, hjust=1))
## save as 7_figure_FoxState_OTUs_byFilterMethodsandRarefy; export at 1000x1000
ggplot(all.mock.alpha, aes(x=SeqID, y=OTUs, color=Labeler)) +
#scale_y_continuous(trans = "log2") +
#ylim(0,157) +
scale_color_manual(values = pal6) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(alpha=0.8, position=position_jitterdodge(jitter.width = 0.2)) +
facet_grid(Method ~ ., scales = "free_x") +
labs(title = "", x="", y="Number of unique sequences", color="") +
theme_devon() + theme(legend.position = "top", axis.text.x = element_text(angle=22.5, hjust=1))
## save as 7_figure_FoxState_OTUs_byFilterMethodsandRarefy; export at 1000x1000
ggplot(all.mock.alpha, aes(x=SeqID, y=OTUs, color=Labeler)) +
#scale_y_continuous(trans = "log2") +
#ylim(0,157) +
scale_color_manual(values = pal6) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(alpha=0.8, position=position_jitterdodge(jitter.width = 0.2)) +
facet_grid(Method ~ ., scales = "free_y") +
labs(title = "", x="", y="Number of unique sequences", color="") +
theme_devon() + theme(legend.position = "top", axis.text.x = element_text(angle=22.5, hjust=1))
## save as 7_figure_FoxState_OTUs_byFilterMethodsandRarefy; export at 1000x1000
ggplot(all.mock.alpha, aes(x=SeqID, y=OTUs, color=Labeler)) +
#scale_y_continuous(trans = "log2") +
#ylim(0,157) +
scale_color_manual(values = pal6) +
geom_bar() +
facet_grid(Method ~ ., scales = "free_y") +
labs(title = "", x="", y="Number of unique sequences", color="") +
theme_devon() + theme(legend.position = "top", axis.text.x = element_text(angle=22.5, hjust=1))
## save as 7_figure_FoxState_OTUs_byFilterMethodsandRarefy; export at 1000x1000
ggplot(all.mock.alpha, aes(x=SeqID, y=OTUs, color=Labeler)) +
#scale_y_continuous(trans = "log2") +
#ylim(0,157) +
scale_color_manual(values = pal6) +
geom_bar(stat="identity") +
facet_grid(Method ~ ., scales = "free_y") +
labs(title = "", x="", y="Number of unique sequences", color="") +
theme_devon() + theme(legend.position = "top", axis.text.x = element_text(angle=22.5, hjust=1))
## save as 7_figure_FoxState_OTUs_byFilterMethodsandRarefy; export at 1000x1000
ggplot(all.mock.alpha, aes(x=SeqID, y=OTUs, fill=Labeler)) +
#scale_y_continuous(trans = "log2") +
#ylim(0,157) +
scale_color_manual(values = pal6) +
geom_bar(stat="identity") +
facet_grid(Method ~ ., scales = "free_y") +
labs(title = "", x="", y="Number of unique sequences", color="") +
theme_devon() + theme(legend.position = "top", axis.text.x = element_text(angle=22.5, hjust=1))
## save as 7_figure_FoxState_OTUs_byFilterMethodsandRarefy; export at 1000x1000
ggplot(all.mock.alpha, aes(x=SeqID, y=OTUs, fill=Labeler)) +
#scale_y_continuous(trans = "log2") +
#ylim(0,157) +
scale_color_manual(values = pal6) +
geom_bar(stat="identity", position = "dodge") +
facet_grid(Method ~ ., scales = "free_y") +
labs(title = "", x="", y="Number of unique sequences", color="") +
theme_devon() + theme(legend.position = "top", axis.text.x = element_text(angle=22.5, hjust=1))
## save as 7_figure_FoxState_OTUs_byFilterMethodsandRarefy; export at 1000x1000
ggplot(all.mock.alpha, aes(x=SeqID, y=OTUs, fill=Labeler)) +
#scale_y_continuous(trans = "log2") +
#ylim(0,157) +
scale_fill_manual(values = pal6) +
geom_bar(stat="identity", position = "dodge") +
facet_grid(Method ~ ., scales = "free_y") +
labs(title = "", x="", y="Number of unique sequences", color="") +
theme_devon() + theme(legend.position = "top", axis.text.x = element_text(angle=22.5, hjust=1))
## save as 7_figure_FoxState_OTUs_byFilterMethodsandRarefy; export at 1000x1000
ggplot(all.mock.alpha, aes(x=SeqID, y=OTUs, fill=Labeler)) +
scale_fill_manual(values = pal6) +
geom_bar(stat="identity", position = "dodge") +
facet_grid(Method ~ ., scales = "free_y") +
labs(title = "", x="", y="Number of unique sequences", fill="",
caption="Yaxis scale varies by horizontal facet") +
theme_devon() + theme(legend.position = "top", axis.text.x = element_text(angle=22.5, hjust=1))
